/*
* Copyright (c) 2014 Microsoft Mobile
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

//
// File generated by WinMDIDL version 8.00.0011
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Lumia.Imaging.idl";
import "Windows.UI.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__lumia2Eimaging_h__)")
cpp_quote("#include \"Lumia.Imaging.h\"")
cpp_quote("#endif // !defined(__lumia2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Eui_h__)")
cpp_quote("#include <Windows.UI.h>")
cpp_quote("#endif // !defined(__windows2Eui_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Lumia
{
    namespace Imaging
    {
        interface IFilter;

        interface IImageConsumer;

        interface IImageProvider;

        typedef struct RampedRange RampedRange;
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        interface IStringable;

        typedef struct Point Point;

        typedef struct Rect Rect;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Lumia
{
    namespace Imaging
    {
        namespace Adjustments
        {
            typedef enum CurveInterpolation CurveInterpolation;

            typedef enum WhiteBalanceMode WhiteBalanceMode;

            typedef enum BlurRegionShape BlurRegionShape;

            typedef enum LensBlurFocusEdgeSofteningMode LensBlurFocusEdgeSofteningMode;

            typedef enum DespeckleLevel DespeckleLevel;

            typedef enum ExposureMode ExposureMode;

            typedef enum LensBlurPredefinedKernelShape LensBlurPredefinedKernelShape;

            typedef enum LensBlurFocusAreaEdgeMirroring LensBlurFocusAreaEdgeMirroring;

            typedef enum LensBlurKernelMapType LensBlurKernelMapType;

            typedef enum NoiseLevel NoiseLevel;

            typedef enum RedEyeRemovalMode RedEyeRemovalMode;

            typedef enum WhitePointCalculationMode WhitePointCalculationMode;

            typedef enum WhiteboardEnhancementMode WhiteboardEnhancementMode;

            typedef struct Levels Levels;

            interface ICurveMinMaxPair;

            interface ICurveMinMaxPairFactory;

            interface ICurve;

            interface ICurveFactory;

            interface ICurveStatics;

            interface IArgbColorCurves;

            interface IAutoEnhanceFilter;

            interface IAutoEnhanceFilterFactory;

            interface IAutoFixAnalyzerResult;

            interface IAutoFixAnalyzer;

            interface IAutoFixAnalyzerFactory;

            interface IAutoLevelsFilter;

            interface IBlurFilter;

            interface IBlurFilterFactory;

            interface IBrightnessFilter;

            interface IBrightnessFilterFactory;

            interface IColorAdjustFilter;

            interface IColorAdjustFilterFactory;

            interface IColorBoostFilter;

            interface IColorBoostFilterFactory;

            interface IColorizationFilter;

            interface IColorizationFilterFactory;

            interface IContrastFilter;

            interface IContrastFilterFactory;

            interface ILensBlurFocusEdgeSofteningFactory;

            interface ICurvesFilter;

            interface ICurvesFilterFactory;

            interface IDespeckleFilter;

            interface IDespeckleFilterFactory;

            interface IExposureFilter;

            interface IExposureFilterFactory;

            interface IGaussianNoiseFilter;

            interface IGaussianNoiseFilterFactory;

            interface IGrayscaleFilter;

            interface IGrayscaleFilterFactory;

            interface IHdrEffect;

            interface IHdrEffectFactory;

            interface IHueSaturationFilter;

            interface IHueSaturationFilterFactory;

            interface IHueSaturationLightnessFilter;

            interface ILensBlurKernel;

            interface ILensBlurCustomKernel;

            interface ILensBlurCustomKernelFactory;

            interface ILensBlurPredefinedKernel;

            interface ILensBlurPredefinedKernelFactory;

            interface ILensBlurEffect;

            interface ILensBlurEffectFactory;

            interface IRgbLevelsFilter;

            interface IRgbLevelsFilterFactory;

            interface ILevelsFilter;

            interface ILevelsFilterFactory;

            interface ILocalBoostAutomaticFilter;

            interface ILocalBoostAutomaticFilterFactory;

            interface ILocalBoostFilter;

            interface ILocalBoostFilterFactory;

            interface INoiseFilter;

            interface INoiseFilterFactory;

            interface IRedEyeRemovalFilter;

            interface IRedEyeRemovalFilterFactory;

            interface ISaturationLightnessFilter;

            interface ISaturationLightnessFilterFactory;

            interface ISharpnessFilter;

            interface ISharpnessFilterFactory;

            interface IRgbMixerFilter;

            interface ITemperatureAndTintFilter;

            interface ITemperatureAndTintFilterFactory;

            interface IVibranceFilter;

            interface IWhiteBalanceFilter;

            interface IWhiteBalanceFilterFactory;

            interface IWhiteboardEnhancementFilter;

            interface IWhiteboardEnhancementFilterFactory;

            runtimeclass CurveMinMaxPair;

            runtimeclass Curve;

            runtimeclass ArgbColorCurves;

            runtimeclass AutoEnhanceFilter;

            runtimeclass AutoFixAnalyzerResult;

            runtimeclass AutoFixAnalyzer;

            runtimeclass AutoLevelsFilter;

            runtimeclass BlurFilter;

            runtimeclass BrightnessFilter;

            runtimeclass ColorAdjustFilter;

            runtimeclass ColorBoostFilter;

            runtimeclass ColorizationFilter;

            runtimeclass ContrastFilter;

            runtimeclass LensBlurFocusEdgeSoftening;

            runtimeclass CurvesFilter;

            runtimeclass DespeckleFilter;

            runtimeclass ExposureFilter;

            runtimeclass GaussianNoiseFilter;

            runtimeclass GrayscaleFilter;

            runtimeclass HdrEffect;

            runtimeclass HueSaturationFilter;

            runtimeclass HueSaturationLightnessFilter;

            runtimeclass LensBlurCustomKernel;

            runtimeclass LensBlurPredefinedKernel;

            runtimeclass LensBlurEffect;

            runtimeclass RgbLevelsFilter;

            runtimeclass LevelsFilter;

            runtimeclass LocalBoostAutomaticFilter;

            runtimeclass LocalBoostFilter;

            runtimeclass NoiseFilter;

            runtimeclass RedEyeRemovalFilter;

            runtimeclass SaturationLightnessFilter;

            runtimeclass SharpnessFilter;

            runtimeclass RgbMixerFilter;

            runtimeclass TemperatureAndTintFilter;

            runtimeclass VibranceFilter;

            runtimeclass WhiteBalanceFilter;

            runtimeclass WhiteboardEnhancementFilter;
        }
    }
}

// Generic instantiations
namespace Lumia
{
    namespace Imaging
    {
        namespace Adjustments
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Lumia.Imaging.Adjustments.Curve*>;

                interface Windows.Foundation.Collections.IIterable<Lumia.Imaging.Adjustments.CurveMinMaxPair*>;

                interface Windows.Foundation.Collections.IIterable<Lumia.Imaging.Adjustments.ILensBlurKernel*>;

                interface Windows.Foundation.Collections.IIterator<Lumia.Imaging.Adjustments.Curve*>;

                interface Windows.Foundation.Collections.IIterator<Lumia.Imaging.Adjustments.CurveMinMaxPair*>;

                interface Windows.Foundation.Collections.IIterator<Lumia.Imaging.Adjustments.ILensBlurKernel*>;

                interface Windows.Foundation.Collections.IVectorView<Lumia.Imaging.Adjustments.ILensBlurKernel*>;

                interface Windows.Foundation.IAsyncOperation<Lumia.Imaging.Adjustments.AutoFixAnalyzerResult*>;
            }
        }
    }
}

// Type definition
namespace Lumia
{
    namespace Imaging
    {
        namespace Adjustments
        {
            [version(0x00000001)]
            enum CurveInterpolation
            {
                Linear             = 0,
                NaturalCubicSpline = 1
            };

            [version(0x00000001)]
            enum WhiteBalanceMode
            {
                Off       = 0,
                Automatic = 1,
                Manual    = 2
            };

            [version(0x00000001)]
            enum BlurRegionShape
            {
                Rectangular = 0,
                Elliptical  = 1
            };

            [version(0x00000001)]
            enum LensBlurFocusEdgeSofteningMode
            {
                Medium = 0,
                Low    = 1,
                High   = 2,
                None   = 3
            };

            [version(0x00000001)]
            enum DespeckleLevel
            {
                Minimum = 0,
                Low     = 1,
                High    = 2,
                Maximum = 3
            };

            [version(0x00000001)]
            enum ExposureMode
            {
                Natural = 0,
                Gamma   = 1
            };

            [version(0x00000001)]
            enum LensBlurPredefinedKernelShape
            {
                Circle  = 0,
                Hexagon = 1,
                Flower  = 2,
                Star    = 3,
                Heart   = 4
            };

            [version(0x00000001)]
            enum LensBlurFocusAreaEdgeMirroring
            {
                On  = 0,
                Off = 1
            };

            [version(0x00000001)]
            enum LensBlurKernelMapType
            {
                ForegroundMask = 0,
                Continuous     = 1
            };

            [version(0x00000001)]
            enum NoiseLevel
            {
                Minimum = 0,
                Medium  = 1,
                Maximum = 2
            };

            [version(0x00000001)]
            enum RedEyeRemovalMode
            {
                Normal                       = 0,
                Highlight                    = 1,
                ReplaceRedWithGreenBlueDark  = 2,
                RestrictRedWithGreenBlueDark = 3,
                ReplaceRedWithGreenBlue      = 4,
                RestrictRedWithGreenBlue     = 5
            };

            [version(0x00000001)]
            enum WhitePointCalculationMode
            {
                Cluster = 0,
                Mean    = 1,
                Maximum = 2,
                Manual  = 3
            };

            [version(0x00000001)]
            enum WhiteboardEnhancementMode
            {
                Hard = 0,
                Soft = 1
            };

            [version(0x00000001)]
            struct Levels
            {
                INT32 Min;
                INT32 Max;
                DOUBLE MidTone;
            };

            [exclusiveto(Lumia.Imaging.Adjustments.CurveMinMaxPair)]
            [uuid(C5D4BC98-7A85-3D39-9065-BDEA26E24F7F)]
            [version(0x00000001)]
            interface ICurveMinMaxPair : IInspectable
            {
                [propget] HRESULT MinCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT MinCurve([in] Lumia.Imaging.Adjustments.Curve* __set_formal);
                [propget] HRESULT MaxCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT MaxCurve([in] Lumia.Imaging.Adjustments.Curve* __set_formal);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.CurveMinMaxPair)]
            [uuid(53D31D73-93C7-306A-9728-2469A0191D59)]
            [version(0x00000001)]
            interface ICurveMinMaxPairFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithCurves([in] Lumia.Imaging.Adjustments.Curve* minCurve, [in] Lumia.Imaging.Adjustments.Curve* maxCurve, [out] [retval] Lumia.Imaging.Adjustments.CurveMinMaxPair** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.Curve)]
            [uuid(7DA5EF09-171D-365F-A85B-281D23CB2CF7)]
            [version(0x00000001)]
            interface ICurve : IInspectable
            {
                [propget] HRESULT CurveInterpolation([out] [retval] Lumia.Imaging.Adjustments.CurveInterpolation* __returnValue);
                [propput] HRESULT CurveInterpolation([in] Lumia.Imaging.Adjustments.CurveInterpolation value);
                [propget] HRESULT Points([out] UINT32* ____returnValueSize, [out] [retval] [size_is(, *____returnValueSize)] Windows.Foundation.Point** __returnValue);
                [propput] HRESULT Points([in] UINT32 __pointsSize, [in] [size_is(__pointsSize)] Windows.Foundation.Point* points);
                HRESULT Clear();
                [overload("SetPoint")] HRESULT SetPoint2([in] INT32 x, [in] INT32 y);
                [overload("SetPoint")] HRESULT SetPoint1([in] Windows.Foundation.Point point);
                HRESULT RemovePoint([in] INT32 x);
                [deprecated("Use the Values property to get an array of y-values corresponding to each x in the range [MinX,MaxX]", remove, 0x6030000)] HRESULT GetInterpolatedValues([out] UINT32* ____returnValueSize, [out] [retval] [size_is(, *____returnValueSize)] BYTE** __returnValue);
                [propget] HRESULT Values([out] UINT32* ____returnValueSize, [out] [retval] [size_is(, *____returnValueSize)] INT32** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.Curve)]
            [uuid(6CF73D80-96E9-3CDA-8F87-2E3CD8D83E9B)]
            [version(0x00000001)]
            interface ICurveFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithInterpolationAndPoints([in] Lumia.Imaging.Adjustments.CurveInterpolation curveInterpolation, [in] UINT32 __pointsSize, [in] [size_is(__pointsSize)] Windows.Foundation.Point* points, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithInterpolation([in] Lumia.Imaging.Adjustments.CurveInterpolation curveInterpolation, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.Curve)]
            [uuid(089ECD54-6F8D-3A21-84B2-87B4D3C35C09)]
            [version(0x00000001)]
            interface ICurveStatics : IInspectable
            {
                [overload("Add")] HRESULT AddInto([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [default_overload] [overload("Add")] HRESULT AddScalarInto([in] Lumia.Imaging.Adjustments.Curve* curve, [in] INT32 scalar, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Add")] HRESULT Add([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [default_overload] [overload("Add")] HRESULT AddScalar([in] Lumia.Imaging.Adjustments.Curve* curve, [in] INT32 scalar, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Subtract")] HRESULT SubtractFromScalarInto([in] INT32 scalar, [in] Lumia.Imaging.Adjustments.Curve* curve, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [default_overload] [overload("Subtract")] HRESULT SubtractInto([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Subtract")] HRESULT SubtractFromScalar([in] INT32 scalar, [in] Lumia.Imaging.Adjustments.Curve* curve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [default_overload] [overload("Subtract")] HRESULT Subtract([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Multiply")] HRESULT MultiplyScalarInto([in] Lumia.Imaging.Adjustments.Curve* curve, [in] DOUBLE factor, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Multiply")] HRESULT MultiplyScalar([in] Lumia.Imaging.Adjustments.Curve* curve, [in] DOUBLE factor, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Interpolate")] HRESULT InterpolateInto([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [in] DOUBLE alpha, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Interpolate")] HRESULT InterpolatePairInto([in] Lumia.Imaging.Adjustments.CurveMinMaxPair* curveMinMaxPair, [in] DOUBLE alpha, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Interpolate")] HRESULT InterpolatePair([in] Lumia.Imaging.Adjustments.CurveMinMaxPair* curveMinMaxPair, [in] DOUBLE alpha, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [default_overload] [overload("Interpolate")] HRESULT Interpolate([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [in] DOUBLE alpha, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Interpolate3")] HRESULT InterpolateThreeInto([in] Lumia.Imaging.Adjustments.Curve* maxCurve, [in] Lumia.Imaging.Adjustments.Curve* normCurve, [in] Lumia.Imaging.Adjustments.Curve* minCurve, [in] DOUBLE alpha, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Interpolate3")] HRESULT InterpolateThree([in] Lumia.Imaging.Adjustments.Curve* maxCurve, [in] Lumia.Imaging.Adjustments.Curve* normCurve, [in] Lumia.Imaging.Adjustments.Curve* minCurve, [in] DOUBLE alpha, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("EstimateInterpolationFactor")] HRESULT EstimateInterpolationFactor([in] Lumia.Imaging.Adjustments.Curve* targetCurve, [in] Lumia.Imaging.Adjustments.Curve* maxCurve, [out] [retval] DOUBLE* __returnValue);
                [default_overload] [overload("EstimateInterpolationFactor")] HRESULT EstimateSignedInterpolationFactor([in] Lumia.Imaging.Adjustments.Curve* targetCurve, [in] Lumia.Imaging.Adjustments.CurveMinMaxPair* curvePair, [out] [retval] DOUBLE* __returnValue);
                [overload("EstimateInterpolationFactors")] HRESULT EstimateInterpolationFactors([in] Lumia.Imaging.Adjustments.Curve* targetCurve, [in] Windows.Foundation.Collections.IIterable<Lumia.Imaging.Adjustments.Curve*>* maxCurves, [out] [retval] Windows.Foundation.Collections.IVector<DOUBLE>** __returnValue);
                [default_overload] [overload("EstimateInterpolationFactors")] HRESULT EstimateSignedInterpolationFactors([in] Lumia.Imaging.Adjustments.Curve* targetCurve, [in] Windows.Foundation.Collections.IIterable<Lumia.Imaging.Adjustments.CurveMinMaxPair*>* curvePairs, [out] [retval] Windows.Foundation.Collections.IVector<DOUBLE>** __returnValue);
                [overload("Compose")] HRESULT ComposeInto([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Compose")] HRESULT Compose([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Reflect")] HRESULT ReflectInto([in] Lumia.Imaging.Adjustments.Curve* curve, [in] DOUBLE coefficient, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Reflect")] HRESULT Reflect([in] Lumia.Imaging.Adjustments.Curve* curve, [in] DOUBLE coefficient, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Clamp")] HRESULT ClampInto([in] Lumia.Imaging.Adjustments.Curve* curve, [in] INT32 min, [in] INT32 max, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("Clamp")] HRESULT Clamp([in] Lumia.Imaging.Adjustments.Curve* curve, [in] INT32 min, [in] INT32 max, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("CombineIntervals")] HRESULT CombineIntervalsInto([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [in] INT32 interval, [in] Lumia.Imaging.Adjustments.Curve* resultCurve, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [overload("CombineIntervals")] HRESULT CombineIntervals([in] Lumia.Imaging.Adjustments.Curve* curve1, [in] Lumia.Imaging.Adjustments.Curve* curve2, [in] INT32 interval, [out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ArgbColorCurves)]
            [uuid(CDB57704-3B0E-3FFC-B125-BB96BFE6E8CD)]
            [version(0x00000001)]
            interface IArgbColorCurves : IInspectable
            {
                [propget] HRESULT Alpha([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT Alpha([in] Lumia.Imaging.Adjustments.Curve* value);
                [propget] HRESULT Red([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT Red([in] Lumia.Imaging.Adjustments.Curve* value);
                [propget] HRESULT Green([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT Green([in] Lumia.Imaging.Adjustments.Curve* value);
                [propget] HRESULT Blue([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT Blue([in] Lumia.Imaging.Adjustments.Curve* value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.AutoEnhanceFilter)]
            [uuid(CC22DB35-583C-3F04-953A-552D704B8772)]
            [version(0x00000001)]
            interface IAutoEnhanceFilter : IInspectable
            {
                [propget] HRESULT IsContrastAndBrightnessEnhancementEnabled([out] [retval] boolean* __returnValue);
                [propput] HRESULT IsContrastAndBrightnessEnhancementEnabled([in] boolean value);
                [propget] HRESULT IsLocalBoostEnhancementEnabled([out] [retval] boolean* __returnValue);
                [propput] HRESULT IsLocalBoostEnhancementEnabled([in] boolean value);
                [propget] HRESULT WhiteBalanceMode([out] [retval] Lumia.Imaging.Adjustments.WhiteBalanceMode* __returnValue);
                [propput] HRESULT WhiteBalanceMode([in] Lumia.Imaging.Adjustments.WhiteBalanceMode value);
                [propget] HRESULT TargetWhitePoint([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT TargetWhitePoint([in] Windows.UI.Color value);
                [propget] HRESULT SourceWhitePoint([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT SourceWhitePoint([in] Windows.UI.Color value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.AutoEnhanceFilter)]
            [uuid(CE60AFD8-3EBB-3361-BE03-4860A447C1C8)]
            [version(0x00000001)]
            interface IAutoEnhanceFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithoutWhiteBalance([in] boolean isContrastAndBrightnessEnhancementEnabled, [in] boolean isLocalBoostEnhancementEnabled, [out] [retval] Lumia.Imaging.Adjustments.AutoEnhanceFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithAutoWhiteBalance([in] boolean isContrastAndBrightnessEnhancementEnabled, [in] boolean isLocalBoostEnhancementEnabled, [in] Windows.UI.Color targetWhitePoint, [out] [retval] Lumia.Imaging.Adjustments.AutoEnhanceFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithManualWhiteBalance([in] boolean isContrastAndBrightnessEnhancementEnabled, [in] boolean isLocalBoostEnhancementEnabled, [in] Windows.UI.Color targetWhitePoint, [in] Windows.UI.Color sourceWhitePoint, [out] [retval] Lumia.Imaging.Adjustments.AutoEnhanceFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.AutoFixAnalyzerResult)]
            [uuid(9B1D6A29-3916-362C-96ED-142D818E839B)]
            [version(0x00000001)]
            interface IAutoFixAnalyzerResult : IInspectable
            {
                [propget] HRESULT LightnessCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propget] HRESULT SaturationCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propget] HRESULT TintParameter([out] [retval] DOUBLE* __returnValue);
                [propget] HRESULT TemperatureParameter([out] [retval] DOUBLE* __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.AutoFixAnalyzer)]
            [uuid(E51E88FE-C340-3A2D-8EAE-9A27EDCFFE8D)]
            [version(0x00000001)]
            interface IAutoFixAnalyzer : IInspectable
            {
                HRESULT AnalyzeAsync([out] [retval] Windows.Foundation.IAsyncOperation<Lumia.Imaging.Adjustments.AutoFixAnalyzerResult*>** __returnValue);
                [propget] HRESULT Quality([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Quality([in] DOUBLE quality);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.AutoFixAnalyzer)]
            [uuid(1887BB7D-8833-3E5C-BB84-75C003780982)]
            [version(0x00000001)]
            interface IAutoFixAnalyzerFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* source, [out] [retval] Lumia.Imaging.Adjustments.AutoFixAnalyzer** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithQuality([in] Lumia.Imaging.IImageProvider* source, [in] DOUBLE quality, [out] [retval] Lumia.Imaging.Adjustments.AutoFixAnalyzer** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.AutoLevelsFilter)]
            [uuid(E5C04606-10F9-31FD-83F2-52B01F2E481B)]
            [version(0x00000001)]
            interface IAutoLevelsFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Adjustments.BlurFilter)]
            [uuid(EFA3196C-CBAF-3E99-BE2A-44762F8CF3AF)]
            [version(0x00000001)]
            interface IBlurFilter : IInspectable
            {
                [propget] HRESULT KernelSize([out] [retval] INT32* __returnValue);
                [propput] HRESULT KernelSize([in] INT32 value);
                [propget] HRESULT Region([out] [retval] Windows.Foundation.Rect* __returnValue);
                [propput] HRESULT Region([in] Windows.Foundation.Rect value);
                [propget] HRESULT BlurRegionShape([out] [retval] Lumia.Imaging.Adjustments.BlurRegionShape* __returnValue);
                [propput] HRESULT BlurRegionShape([in] Lumia.Imaging.Adjustments.BlurRegionShape value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.BlurFilter)]
            [uuid(7F98AB49-CB03-3E85-BC7A-236E365A6C04)]
            [version(0x00000001)]
            interface IBlurFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithKernelSize([in] INT32 kernelSize, [out] [retval] Lumia.Imaging.Adjustments.BlurFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithKernelSizeAndRegion([in] INT32 kernelSize, [in] Windows.Foundation.Rect region, [in] Lumia.Imaging.Adjustments.BlurRegionShape regionShape, [out] [retval] Lumia.Imaging.Adjustments.BlurFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.BrightnessFilter)]
            [uuid(5690B396-38FD-3354-8D21-A86ED0195877)]
            [version(0x00000001)]
            interface IBrightnessFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Level([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.BrightnessFilter)]
            [uuid(0B91C9CD-4A75-3E0A-A049-385AAC746D88)]
            [version(0x00000001)]
            interface IBrightnessFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithLevel([in] DOUBLE level, [out] [retval] Lumia.Imaging.Adjustments.BrightnessFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ColorAdjustFilter)]
            [uuid(BDBBA94F-580E-3B22-88FC-AA7F3E7F5774)]
            [version(0x00000001)]
            interface IColorAdjustFilter : IInspectable
            {
                [propget] HRESULT Red([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Red([in] DOUBLE value);
                [propget] HRESULT Green([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Green([in] DOUBLE value);
                [propget] HRESULT Blue([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Blue([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ColorAdjustFilter)]
            [uuid(BC050760-8045-3C43-AE04-5B44C5DABBFC)]
            [version(0x00000001)]
            interface IColorAdjustFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithAdjustments([in] DOUBLE red, [in] DOUBLE green, [in] DOUBLE blue, [out] [retval] Lumia.Imaging.Adjustments.ColorAdjustFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ColorBoostFilter)]
            [uuid(50F6E296-2EE9-3419-B8E2-7EBD5D5FEE23)]
            [version(0x00000001)]
            interface IColorBoostFilter : IInspectable
            {
                [propget] HRESULT Gain([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Gain([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ColorBoostFilter)]
            [uuid(0468D14F-44BE-3FD9-AA94-08B8FFC1A968)]
            [version(0x00000001)]
            interface IColorBoostFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithGain([in] DOUBLE gain, [out] [retval] Lumia.Imaging.Adjustments.ColorBoostFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ColorizationFilter)]
            [uuid(32E8BAC4-F343-3710-911F-DB34DED7E22E)]
            [version(0x00000001)]
            interface IColorizationFilter : IInspectable
            {
                [propget] HRESULT Color([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT Color([in] Windows.UI.Color value);
                [propget] HRESULT Luminance([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Luminance([in] DOUBLE value);
                [propget] HRESULT Chrominance([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Chrominance([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ColorizationFilter)]
            [uuid(0A5CD2B3-5DF9-3235-9C3A-F905187F9C53)]
            [version(0x00000001)]
            interface IColorizationFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithReferenceColorAndAdjustments([in] Windows.UI.Color color, [in] DOUBLE luminance, [in] DOUBLE chrominance, [out] [retval] Lumia.Imaging.Adjustments.ColorizationFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ContrastFilter)]
            [uuid(C0D67795-0074-3401-B876-5D61CCC7C853)]
            [version(0x00000001)]
            interface IContrastFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Level([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ContrastFilter)]
            [uuid(262D4FD9-B743-39D1-AFBD-76215B98C238)]
            [version(0x00000001)]
            interface IContrastFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithContrastLevel([in] DOUBLE contrastLevel, [out] [retval] Lumia.Imaging.Adjustments.ContrastFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening)]
            [uuid(CDDA07D2-B901-3AD8-B7CC-EA90C2D34D21)]
            [version(0x00000001)]
            interface ILensBlurFocusEdgeSofteningFactory : IInspectable
            {
                [default_overload] [overload("CreateInstance")] HRESULT CreateAutomatic([in] Lumia.Imaging.Adjustments.LensBlurFocusEdgeSofteningMode mode, [out] [retval] Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening** __returnValue);
                [overload("CreateInstance")] HRESULT CreateExactPixels([in] INT32 exactPixels, [out] [retval] Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.CurvesFilter)]
            [uuid(0069B4BD-C13E-3C2B-8378-BF3C31EFEDDA)]
            [version(0x00000001)]
            interface ICurvesFilter : IInspectable
            {
                [propget] HRESULT Red([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT Red([in] Lumia.Imaging.Adjustments.Curve* value);
                [propget] HRESULT Green([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT Green([in] Lumia.Imaging.Adjustments.Curve* value);
                [propget] HRESULT Blue([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT Blue([in] Lumia.Imaging.Adjustments.Curve* value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.CurvesFilter)]
            [uuid(BEEDBA0A-6924-3FDD-A484-9C8049237187)]
            [version(0x00000001)]
            interface ICurvesFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateInstance2([in] Lumia.Imaging.Adjustments.Curve* rgb, [out] [retval] Lumia.Imaging.Adjustments.CurvesFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateInstance1([in] Lumia.Imaging.Adjustments.Curve* red, [in] Lumia.Imaging.Adjustments.Curve* green, [in] Lumia.Imaging.Adjustments.Curve* blue, [out] [retval] Lumia.Imaging.Adjustments.CurvesFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.DespeckleFilter)]
            [uuid(D22285EE-C543-3597-AADB-C12F23FF41ED)]
            [version(0x00000001)]
            interface IDespeckleFilter : IInspectable
            {
                [propget] HRESULT DespeckleLevel([out] [retval] Lumia.Imaging.Adjustments.DespeckleLevel* __returnValue);
                [propput] HRESULT DespeckleLevel([in] Lumia.Imaging.Adjustments.DespeckleLevel value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.DespeckleFilter)]
            [uuid(2632F169-6FDE-3360-91EC-B3418E7CA403)]
            [version(0x00000001)]
            interface IDespeckleFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.Adjustments.DespeckleLevel despeckleLevel, [out] [retval] Lumia.Imaging.Adjustments.DespeckleFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ExposureFilter)]
            [uuid(4DE11490-D9CB-36A4-8645-5E598295E452)]
            [version(0x00000001)]
            interface IExposureFilter : IInspectable
            {
                [propget] HRESULT ExposureMode([out] [retval] Lumia.Imaging.Adjustments.ExposureMode* __returnValue);
                [propput] HRESULT ExposureMode([in] Lumia.Imaging.Adjustments.ExposureMode value);
                [propget] HRESULT Gain([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Gain([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.ExposureFilter)]
            [uuid(E365E6E1-54A7-3427-AD14-0E0821C2EFA9)]
            [version(0x00000001)]
            interface IExposureFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSettings([in] Lumia.Imaging.Adjustments.ExposureMode exposureMode, [in] DOUBLE gain, [out] [retval] Lumia.Imaging.Adjustments.ExposureFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.GaussianNoiseFilter)]
            [uuid(CD3AFC05-59D1-3D42-BB8B-0E18009FE2EA)]
            [version(0x00000001)]
            interface IGaussianNoiseFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Level([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.GaussianNoiseFilter)]
            [uuid(89014334-85BF-395A-B543-CCBEE7512EB4)]
            [version(0x00000001)]
            interface IGaussianNoiseFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] DOUBLE level, [out] [retval] Lumia.Imaging.Adjustments.GaussianNoiseFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.GrayscaleFilter)]
            [uuid(C12416FD-61D4-3E8D-8202-1CEED82B454A)]
            [version(0x00000001)]
            interface IGrayscaleFilter : IInspectable
            {
                [propget] HRESULT RedWeight([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT RedWeight([in] DOUBLE value);
                [propget] HRESULT GreenWeight([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT GreenWeight([in] DOUBLE value);
                [propget] HRESULT BlueWeight([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT BlueWeight([in] DOUBLE value);
                [propget] HRESULT Constant([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Constant([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.GrayscaleFilter)]
            [uuid(9B7F7FD2-2D26-3F4F-870D-C5D5F8AFC1E5)]
            [version(0x00000001)]
            interface IGrayscaleFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithWeights([in] DOUBLE redWeight, [in] DOUBLE greenWeight, [in] DOUBLE blueWeight, [in] DOUBLE constant, [out] [retval] Lumia.Imaging.Adjustments.GrayscaleFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.HdrEffect)]
            [uuid(6EFDAFBD-D4F1-3AFD-9439-7972AAB2FE6C)]
            [version(0x00000001)]
            interface IHdrEffect : IInspectable
            {
                [propget] HRESULT Strength([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Strength([in] DOUBLE value);
                [propget] HRESULT Saturation([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Saturation([in] DOUBLE value);
                [propget] HRESULT Gamma([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Gamma([in] DOUBLE value);
                [propget] HRESULT NoiseSuppression([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT NoiseSuppression([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.HdrEffect)]
            [uuid(963E7923-D4BA-3F0E-929F-84C7498FF087)]
            [version(0x00000001)]
            interface IHdrEffectFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.Adjustments.HdrEffect** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.HueSaturationFilter)]
            [uuid(82AEBD12-ACEC-36C7-93B4-C3ED03C0A001)]
            [version(0x00000001)]
            interface IHueSaturationFilter : IInspectable
            {
                [propget] HRESULT Hue([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Hue([in] DOUBLE value);
                [propget] HRESULT Saturation([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Saturation([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.HueSaturationFilter)]
            [uuid(B473ADA1-63BD-3AC7-9A6D-8D86A60999CD)]
            [version(0x00000001)]
            interface IHueSaturationFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithAdjustments([in] DOUBLE hue, [in] DOUBLE saturation, [out] [retval] Lumia.Imaging.Adjustments.HueSaturationFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.HueSaturationLightnessFilter)]
            [uuid(50742D97-901F-3812-BF2E-24FEECBBA087)]
            [version(0x00000001)]
            interface IHueSaturationLightnessFilter : IInspectable
            {
                [propget] HRESULT HueCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT HueCurve([in] Lumia.Imaging.Adjustments.Curve* value);
                [propget] HRESULT SaturationCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT SaturationCurve([in] Lumia.Imaging.Adjustments.Curve* value);
                [propget] HRESULT LightnessCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT LightnessCurve([in] Lumia.Imaging.Adjustments.Curve* value);
            }

            [uuid(2875C1F8-E9F1-3A6A-94C4-C695A5640745)]
            [version(0x00000001)]
            interface ILensBlurKernel : IInspectable
            {
                [propget] HRESULT PointLightStrength([out] [retval] UINT32* __returnValue);
                [propput] HRESULT PointLightStrength([in] UINT32 __set_formal);
                [propget] HRESULT Size([out] [retval] UINT32* __returnValue);
                [propput] HRESULT Size([in] UINT32 __set_formal);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LensBlurCustomKernel)]
            [uuid(2E02C2D9-6A07-3F8B-8D49-0F4504D6917E)]
            [version(0x00000001)]
            interface ILensBlurCustomKernel : IInspectable
            {
                [propget] HRESULT Shape([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT Shape([in] Lumia.Imaging.IImageProvider* Shape);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LensBlurCustomKernel)]
            [uuid(B3DB6D5D-86F8-337C-9A52-5BA18B78FC92)]
            [version(0x00000001)]
            interface ILensBlurCustomKernelFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateFromImage([in] Lumia.Imaging.IImageProvider* shape, [out] [retval] Lumia.Imaging.Adjustments.LensBlurCustomKernel** __returnValue);
                [overload("CreateInstance")] HRESULT CreateScaledFromImage([in] Lumia.Imaging.IImageProvider* shape, [in] UINT32 size, [out] [retval] Lumia.Imaging.Adjustments.LensBlurCustomKernel** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LensBlurPredefinedKernel)]
            [uuid(A27117D4-2916-32A6-90AD-7BD3E4B180D6)]
            [version(0x00000001)]
            interface ILensBlurPredefinedKernel : IInspectable
            {
                [propget] HRESULT LensBlurPredefinedKernelShape([out] [retval] Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape* __returnValue);
                [propput] HRESULT LensBlurPredefinedKernelShape([in] Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape shape);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LensBlurPredefinedKernel)]
            [uuid(8E2543D2-1AFE-3B61-B922-E5B7BB364E32)]
            [version(0x00000001)]
            interface ILensBlurPredefinedKernelFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithShapeAndSize([in] Lumia.Imaging.Adjustments.LensBlurPredefinedKernelShape shape, [in] UINT32 size, [out] [retval] Lumia.Imaging.Adjustments.LensBlurPredefinedKernel** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LensBlurEffect)]
            [uuid(959A0232-C5CB-3AA3-A25F-EF9398F61938)]
            [version(0x00000001)]
            interface ILensBlurEffect : IInspectable
            {
                [propget] HRESULT KernelMap([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT KernelMap([in] Lumia.Imaging.IImageProvider* value);
                [propget] HRESULT Kernels([out] [retval] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.Adjustments.ILensBlurKernel*>** __returnValue);
                [propput] HRESULT Kernels([in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.Adjustments.ILensBlurKernel*>* value);
                [propget] HRESULT BlendKernelWidth([out] [retval] UINT32* __returnValue);
                [propput] HRESULT BlendKernelWidth([in] UINT32 value);
                [propget] HRESULT PointLightStrength([out] [retval] UINT32* __returnValue);
                [propput] HRESULT PointLightStrength([in] UINT32 value);
                [propget] HRESULT Quality([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Quality([in] DOUBLE quality);
                [propget] HRESULT FocusAreaEdgeMirroring([out] [retval] Lumia.Imaging.Adjustments.LensBlurFocusAreaEdgeMirroring* __returnValue);
                [propput] HRESULT FocusAreaEdgeMirroring([in] Lumia.Imaging.Adjustments.LensBlurFocusAreaEdgeMirroring value);
                [propget] HRESULT KernelMapType([out] [retval] Lumia.Imaging.Adjustments.LensBlurKernelMapType* __returnValue);
                [propput] HRESULT KernelMapType([in] Lumia.Imaging.Adjustments.LensBlurKernelMapType value);
                [propget] HRESULT FocusEdgeSoftening([out] [retval] Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening** __returnValue);
                [propput] HRESULT FocusEdgeSoftening([in] Lumia.Imaging.Adjustments.LensBlurFocusEdgeSoftening* value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LensBlurEffect)]
            [uuid(2B42357E-739C-3EF7-BCBD-0C3DC02CEE02)]
            [version(0x00000001)]
            interface ILensBlurEffectFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.Adjustments.LensBlurEffect** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithKernelMap([in] Lumia.Imaging.IImageProvider* imageSource, [in] Lumia.Imaging.IImageProvider* kernelMap, [out] [retval] Lumia.Imaging.Adjustments.LensBlurEffect** __returnValue);
                [default_overload] [overload("CreateInstance")] HRESULT CreateWithKernel([in] Lumia.Imaging.IImageProvider* imageSource, [in] Lumia.Imaging.Adjustments.ILensBlurKernel* kernel, [out] [retval] Lumia.Imaging.Adjustments.LensBlurEffect** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithKernelMapAndKernel([in] Lumia.Imaging.IImageProvider* imageSource, [in] Lumia.Imaging.IImageProvider* kernelMap, [in] Lumia.Imaging.Adjustments.ILensBlurKernel* kernel, [out] [retval] Lumia.Imaging.Adjustments.LensBlurEffect** __returnValue);
                [default_overload] [overload("CreateInstance")] HRESULT CreateWithKernelMapAndKernels([in] Lumia.Imaging.IImageProvider* imageSource, [in] Lumia.Imaging.IImageProvider* kernelMap, [in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.Adjustments.ILensBlurKernel*>* kernels, [out] [retval] Lumia.Imaging.Adjustments.LensBlurEffect** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.RgbLevelsFilter)]
            [uuid(8FB00004-D43B-352D-9817-DE53C99CAC19)]
            [version(0x00000001)]
            interface IRgbLevelsFilter : IInspectable
            {
                [propget] HRESULT Rgb([out] [retval] Lumia.Imaging.Adjustments.Levels* __returnValue);
                [propput] HRESULT Rgb([in] Lumia.Imaging.Adjustments.Levels value);
                [propget] HRESULT Red([out] [retval] Lumia.Imaging.Adjustments.Levels* __returnValue);
                [propput] HRESULT Red([in] Lumia.Imaging.Adjustments.Levels value);
                [propget] HRESULT Green([out] [retval] Lumia.Imaging.Adjustments.Levels* __returnValue);
                [propput] HRESULT Green([in] Lumia.Imaging.Adjustments.Levels value);
                [propget] HRESULT Blue([out] [retval] Lumia.Imaging.Adjustments.Levels* __returnValue);
                [propput] HRESULT Blue([in] Lumia.Imaging.Adjustments.Levels value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.RgbLevelsFilter)]
            [uuid(32DB5039-6795-3A10-8D41-76E2F1690C4D)]
            [version(0x00000001)]
            interface IRgbLevelsFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSharedLevels([in] Lumia.Imaging.Adjustments.Levels rgb, [out] [retval] Lumia.Imaging.Adjustments.RgbLevelsFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithIndividualLevels([in] Lumia.Imaging.Adjustments.Levels rgb, [in] Lumia.Imaging.Adjustments.Levels red, [in] Lumia.Imaging.Adjustments.Levels green, [in] Lumia.Imaging.Adjustments.Levels blue, [out] [retval] Lumia.Imaging.Adjustments.RgbLevelsFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LevelsFilter)]
            [uuid(86715323-584F-35C8-9291-FD8ED2CC4CF4)]
            [version(0x00000001)]
            interface ILevelsFilter : IInspectable
            {
                [propget] HRESULT White([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT White([in] DOUBLE value);
                [propget] HRESULT Gray([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Gray([in] DOUBLE value);
                [propget] HRESULT Black([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Black([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LevelsFilter)]
            [uuid(FF6DB6A4-456E-320A-8F2F-1B91C7F358F4)]
            [version(0x00000001)]
            interface ILevelsFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithLevels([in] DOUBLE white, [in] DOUBLE gray, [in] DOUBLE black, [out] [retval] Lumia.Imaging.Adjustments.LevelsFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter)]
            [uuid(02A1CC0A-E177-3A86-BC68-69CECADC06FF)]
            [version(0x00000001)]
            interface ILocalBoostAutomaticFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] INT32* __returnValue);
                [propput] HRESULT Level([in] INT32 value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter)]
            [uuid(CA5C5826-5E14-3C58-A3E6-0F5645B9F76F)]
            [version(0x00000001)]
            interface ILocalBoostAutomaticFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithLevel([in] INT32 level, [out] [retval] Lumia.Imaging.Adjustments.LocalBoostAutomaticFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LocalBoostFilter)]
            [uuid(F94B83DA-DE75-3CA5-AB6E-6B7AA772A17C)]
            [version(0x00000001)]
            interface ILocalBoostFilter : IInspectable
            {
                [propget] HRESULT Gamma([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Gamma([in] DOUBLE value);
                [propget] HRESULT DarkContrast([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT DarkContrast([in] DOUBLE value);
                [propget] HRESULT LightContrast([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT LightContrast([in] DOUBLE value);
                [propget] HRESULT SensitivityLevel([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT SensitivityLevel([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.LocalBoostFilter)]
            [uuid(81F521F4-D860-3EA5-A7AE-0863ED9BB640)]
            [version(0x00000001)]
            interface ILocalBoostFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSettings([in] DOUBLE gamma, [in] DOUBLE darkContrast, [in] DOUBLE lightContrast, [in] DOUBLE sensitivityLevel, [out] [retval] Lumia.Imaging.Adjustments.LocalBoostFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.NoiseFilter)]
            [uuid(106628C4-9CCC-300D-B002-E10904676B73)]
            [version(0x00000001)]
            interface INoiseFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] Lumia.Imaging.Adjustments.NoiseLevel* __returnValue);
                [propput] HRESULT Level([in] Lumia.Imaging.Adjustments.NoiseLevel value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.NoiseFilter)]
            [uuid(4432E5EF-26B6-3B77-84E4-F5C63FBDB344)]
            [version(0x00000001)]
            interface INoiseFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithLevel([in] Lumia.Imaging.Adjustments.NoiseLevel level, [out] [retval] Lumia.Imaging.Adjustments.NoiseFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.RedEyeRemovalFilter)]
            [uuid(654544E3-9EA1-38A7-A783-DC9F0E0C864D)]
            [version(0x00000001)]
            interface IRedEyeRemovalFilter : IInspectable
            {
                [propget] HRESULT EyeAreas([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Rect>** __returnValue);
                [propput] HRESULT EyeAreas([in] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Rect>* value);
                [propget] HRESULT Mode([out] [retval] Lumia.Imaging.Adjustments.RedEyeRemovalMode* __returnValue);
                [propput] HRESULT Mode([in] Lumia.Imaging.Adjustments.RedEyeRemovalMode value);
                [propget] HRESULT DetectedEyes([out] [retval] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Rect>** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.RedEyeRemovalFilter)]
            [uuid(3C942718-D732-3BE3-90F7-EF14FF9E505F)]
            [version(0x00000001)]
            interface IRedEyeRemovalFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Rect>* eyeAreas, [out] [retval] Lumia.Imaging.Adjustments.RedEyeRemovalFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithRemovalMode([in] Windows.Foundation.Collections.IVectorView<Windows.Foundation.Rect>* eyeAreas, [in] Lumia.Imaging.Adjustments.RedEyeRemovalMode mode, [out] [retval] Lumia.Imaging.Adjustments.RedEyeRemovalFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.SaturationLightnessFilter)]
            [uuid(8D214D1E-2DBC-3A2F-858D-498C7E4A76F5)]
            [version(0x00000001)]
            interface ISaturationLightnessFilter : IInspectable
            {
                [propget] HRESULT SaturationCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT SaturationCurve([in] Lumia.Imaging.Adjustments.Curve* value);
                [propget] HRESULT LightnessCurve([out] [retval] Lumia.Imaging.Adjustments.Curve** __returnValue);
                [propput] HRESULT LightnessCurve([in] Lumia.Imaging.Adjustments.Curve* value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.SaturationLightnessFilter)]
            [uuid(076CDEA9-BE0B-3101-ADBA-A0702C809083)]
            [version(0x00000001)]
            interface ISaturationLightnessFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.Adjustments.Curve* saturationCurve, [in] Lumia.Imaging.Adjustments.Curve* lightnessCurve, [out] [retval] Lumia.Imaging.Adjustments.SaturationLightnessFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.SharpnessFilter)]
            [uuid(CE6CDBD7-61C7-3B57-A346-B21363B803DC)]
            [version(0x00000001)]
            interface ISharpnessFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Level([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.SharpnessFilter)]
            [uuid(69FC8745-85B5-3D88-B87C-E8CED11F18A6)]
            [version(0x00000001)]
            interface ISharpnessFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithLevel([in] DOUBLE level, [out] [retval] Lumia.Imaging.Adjustments.SharpnessFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.RgbMixerFilter)]
            [uuid(3232F785-E964-3AD1-A811-B02E90FBB803)]
            [version(0x00000001)]
            interface IRgbMixerFilter : IInspectable
            {
                [propget] HRESULT Alpha([out] [retval] Lumia.Imaging.Adjustments.ArgbColorCurves** __returnValue);
                [propput] HRESULT Alpha([in] Lumia.Imaging.Adjustments.ArgbColorCurves* value);
                [propget] HRESULT Red([out] [retval] Lumia.Imaging.Adjustments.ArgbColorCurves** __returnValue);
                [propput] HRESULT Red([in] Lumia.Imaging.Adjustments.ArgbColorCurves* value);
                [propget] HRESULT Green([out] [retval] Lumia.Imaging.Adjustments.ArgbColorCurves** __returnValue);
                [propput] HRESULT Green([in] Lumia.Imaging.Adjustments.ArgbColorCurves* value);
                [propget] HRESULT Blue([out] [retval] Lumia.Imaging.Adjustments.ArgbColorCurves** __returnValue);
                [propput] HRESULT Blue([in] Lumia.Imaging.Adjustments.ArgbColorCurves* value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.TemperatureAndTintFilter)]
            [uuid(2A5D450A-42F4-3762-B190-D0CF0C02D3B7)]
            [version(0x00000001)]
            interface ITemperatureAndTintFilter : IInspectable
            {
                [propget] HRESULT Temperature([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Temperature([in] DOUBLE value);
                [propget] HRESULT Tint([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Tint([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.TemperatureAndTintFilter)]
            [uuid(0F9EB73F-3EE5-3995-87CB-3D9106E2D567)]
            [version(0x00000001)]
            interface ITemperatureAndTintFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithAdjustments([in] DOUBLE temperature, [in] DOUBLE tint, [out] [retval] Lumia.Imaging.Adjustments.TemperatureAndTintFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.VibranceFilter)]
            [uuid(9529634E-2ED3-30CB-8073-E9C5958A863D)]
            [version(0x00000001)]
            interface IVibranceFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Level([in] DOUBLE value);
                [propget] HRESULT SkinLevel([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT SkinLevel([in] DOUBLE value);
                [propget] HRESULT Sensitivity([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Sensitivity([in] DOUBLE value);
                [propget] HRESULT SkinHueRange([out] [retval] Lumia.Imaging.RampedRange* __returnValue);
                [propput] HRESULT SkinHueRange([in] Lumia.Imaging.RampedRange value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.WhiteBalanceFilter)]
            [uuid(DBB687D5-CAD2-3400-80A3-36435E68DE4D)]
            [version(0x00000001)]
            interface IWhiteBalanceFilter : IInspectable
            {
                [propget] HRESULT WhitePointCalculationMode([out] [retval] Lumia.Imaging.Adjustments.WhitePointCalculationMode* __returnValue);
                [propput] HRESULT WhitePointCalculationMode([in] Lumia.Imaging.Adjustments.WhitePointCalculationMode value);
                [propget] HRESULT SourceWhitePoint([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT SourceWhitePoint([in] Windows.UI.Color value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.WhiteBalanceFilter)]
            [uuid(D696B62F-1F1F-3359-B5AA-352DA61A1BAF)]
            [version(0x00000001)]
            interface IWhiteBalanceFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.Adjustments.WhitePointCalculationMode whitePointCalculationMode, [out] [retval] Lumia.Imaging.Adjustments.WhiteBalanceFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithSourceWhitePoint([in] Lumia.Imaging.Adjustments.WhitePointCalculationMode whitePointCalculationMode, [in] Windows.UI.Color sourceWhitePoint, [out] [retval] Lumia.Imaging.Adjustments.WhiteBalanceFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter)]
            [uuid(5B5D3DEF-0898-3C71-B4D8-EB6C636D1637)]
            [version(0x00000001)]
            interface IWhiteboardEnhancementFilter : IInspectable
            {
                [propget] HRESULT WhiteboardEnhancementMode([out] [retval] Lumia.Imaging.Adjustments.WhiteboardEnhancementMode* __returnValue);
                [propput] HRESULT WhiteboardEnhancementMode([in] Lumia.Imaging.Adjustments.WhiteboardEnhancementMode value);
            }

            [exclusiveto(Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter)]
            [uuid(814B7CF2-6455-3876-BB7C-118048871676)]
            [version(0x00000001)]
            interface IWhiteboardEnhancementFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithMode([in] Lumia.Imaging.Adjustments.WhiteboardEnhancementMode whiteboardEnhancementMode, [out] [retval] Lumia.Imaging.Adjustments.WhiteboardEnhancementFilter** __returnValue);
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.ICurveMinMaxPairFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass CurveMinMaxPair
            {
                [default] interface Lumia.Imaging.Adjustments.ICurveMinMaxPair;
            }

            [activatable(Lumia.Imaging.Adjustments.ICurveFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [static(Lumia.Imaging.Adjustments.ICurveStatics, 0x00000001)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass Curve
            {
                interface Windows.Foundation.IClosable;
                [default] interface Lumia.Imaging.Adjustments.ICurve;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ArgbColorCurves
            {
                [default] interface Lumia.Imaging.Adjustments.IArgbColorCurves;
            }

            [activatable(Lumia.Imaging.Adjustments.IAutoEnhanceFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass AutoEnhanceFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IAutoEnhanceFilter;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass AutoFixAnalyzerResult
            {
                [default] interface Lumia.Imaging.Adjustments.IAutoFixAnalyzerResult;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.IAutoFixAnalyzerFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass AutoFixAnalyzer
            {
                interface Lumia.Imaging.IImageConsumer;
                [default] interface Lumia.Imaging.Adjustments.IAutoFixAnalyzer;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass AutoLevelsFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IAutoLevelsFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.IBlurFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass BlurFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IBlurFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.IBrightnessFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass BrightnessFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IBrightnessFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.IColorAdjustFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ColorAdjustFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IColorAdjustFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.IColorBoostFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ColorBoostFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IColorBoostFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.IColorizationFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ColorizationFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IColorizationFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.IContrastFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ContrastFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IContrastFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.ILensBlurFocusEdgeSofteningFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass LensBlurFocusEdgeSoftening
            {
                [default] interface Windows.Foundation.IStringable;
            }

            [activatable(Lumia.Imaging.Adjustments.ICurvesFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass CurvesFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.ICurvesFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.IDespeckleFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass DespeckleFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IDespeckleFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.IExposureFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ExposureFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IExposureFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.IGaussianNoiseFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass GaussianNoiseFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IGaussianNoiseFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.IGrayscaleFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass GrayscaleFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IGrayscaleFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.IHdrEffectFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass HdrEffect
            {
                interface Windows.Foundation.IClosable;
                interface Lumia.Imaging.IImageConsumer;
                interface Lumia.Imaging.IImageProvider;
                [default] interface Lumia.Imaging.Adjustments.IHdrEffect;
            }

            [activatable(Lumia.Imaging.Adjustments.IHueSaturationFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass HueSaturationFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IHueSaturationFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass HueSaturationLightnessFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IHueSaturationLightnessFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.ILensBlurCustomKernelFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass LensBlurCustomKernel
            {
                interface Lumia.Imaging.Adjustments.ILensBlurKernel;
                [default] interface Lumia.Imaging.Adjustments.ILensBlurCustomKernel;
            }

            [activatable(Lumia.Imaging.Adjustments.ILensBlurPredefinedKernelFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass LensBlurPredefinedKernel
            {
                interface Lumia.Imaging.Adjustments.ILensBlurKernel;
                [default] interface Lumia.Imaging.Adjustments.ILensBlurPredefinedKernel;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.ILensBlurEffectFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass LensBlurEffect
            {
                interface Windows.Foundation.IClosable;
                interface Lumia.Imaging.IImageConsumer;
                interface Lumia.Imaging.IImageProvider;
                [default] interface Lumia.Imaging.Adjustments.ILensBlurEffect;
            }

            [activatable(Lumia.Imaging.Adjustments.IRgbLevelsFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass RgbLevelsFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IRgbLevelsFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.ILevelsFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass LevelsFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.ILevelsFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.ILocalBoostAutomaticFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass LocalBoostAutomaticFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.ILocalBoostAutomaticFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.ILocalBoostFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass LocalBoostFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.ILocalBoostFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.INoiseFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass NoiseFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.INoiseFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.IRedEyeRemovalFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass RedEyeRemovalFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IRedEyeRemovalFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.ISaturationLightnessFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass SaturationLightnessFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.ISaturationLightnessFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.ISharpnessFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass SharpnessFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.ISharpnessFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass RgbMixerFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IRgbMixerFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Adjustments.ITemperatureAndTintFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass TemperatureAndTintFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.ITemperatureAndTintFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass VibranceFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IVibranceFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.IWhiteBalanceFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass WhiteBalanceFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IWhiteBalanceFilter;
            }

            [activatable(Lumia.Imaging.Adjustments.IWhiteboardEnhancementFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass WhiteboardEnhancementFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Adjustments.IWhiteboardEnhancementFilter;
            }
        }
    }
}
