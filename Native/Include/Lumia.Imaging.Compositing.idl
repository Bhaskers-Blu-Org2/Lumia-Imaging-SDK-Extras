//
// File generated by WinMDIDL version 8.00.0011
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Lumia.Imaging.idl";
import "Windows.UI.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__lumia2Eimaging_h__)")
cpp_quote("#include \"Lumia.Imaging.h\"")
cpp_quote("#endif // !defined(__lumia2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Eui_h__)")
cpp_quote("#include <Windows.UI.h>")
cpp_quote("#endif // !defined(__windows2Eui_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Lumia
{
    namespace Imaging
    {
        interface IFilter;

        interface IImageConsumer;

        interface IImageProvider;

        typedef enum MaskAnnotationType MaskAnnotationType;

        typedef enum OutputOption OutputOption;
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        typedef struct Rect Rect;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Lumia
{
    namespace Imaging
    {
        namespace Compositing
        {
            typedef enum BlendFunction BlendFunction;

            interface IAlphaToGrayscaleFilter;

            interface IBlendEffect;

            interface IBlendEffectFactory;

            interface IBlendFilter;

            interface IBlendFilterFactory;

            interface IExtractedObjectImageSource;

            interface IChromaKeyFilter;

            interface IChromaKeyFilterFactory;

            interface IImageFusionFilter;

            interface IImageFusionFilterFactory;

            interface IInteractiveSegmentationMaskRectifier;

            interface IInteractiveForegroundSegmenter;

            interface IInteractiveForegroundSegmenterFactory;

            interface IObjectExtractor;

            interface IObjectExtractorFactory;

            runtimeclass AlphaToGrayscaleFilter;

            runtimeclass BlendEffect;

            runtimeclass BlendFilter;

            runtimeclass ExtractedObjectImageSource;

            runtimeclass ChromaKeyFilter;

            runtimeclass ImageFusionFilter;

            runtimeclass InteractiveSegmentationMaskRectifier;

            runtimeclass InteractiveForegroundSegmenter;

            runtimeclass ObjectExtractor;
        }
    }
}

// Generic instantiations
namespace Lumia
{
    namespace Imaging
    {
        namespace Compositing
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Lumia.Imaging.Compositing.ExtractedObjectImageSource*>;

                interface Windows.Foundation.Collections.IIterator<Lumia.Imaging.Compositing.ExtractedObjectImageSource*>;

                interface Windows.Foundation.Collections.IVectorView<Lumia.Imaging.Compositing.ExtractedObjectImageSource*>;

                interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Lumia.Imaging.Compositing.ExtractedObjectImageSource*>*>;
            }
        }
    }
}

// Type definition
namespace Lumia
{
    namespace Imaging
    {
        namespace Compositing
        {
            [version(0x00000001)]
            enum BlendFunction
            {
                Normal           = 0,
                Multiply         = 1,
                Add              = 2,
                Lineardodge      = 2,
                Color            = 3,
                Colorburn        = 4,
                Colordodge       = 5,
                Screen           = 8,
                Overlay          = 6,
                Softlight        = 7,
                Hardlight        = 9,
                Darken           = 10,
                Lighten          = 11,
                Hue              = 12,
                Exclusion        = 13,
                Difference       = 14,
                Linearlight      = 15,
                Vividlight       = 16,
                SignedDifference = 17
            };

            [exclusiveto(Lumia.Imaging.Compositing.AlphaToGrayscaleFilter)]
            [uuid(8F24A84C-E4B8-35D4-82A9-881C41380D46)]
            [version(0x00000001)]
            interface IAlphaToGrayscaleFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Compositing.BlendEffect)]
            [uuid(BCE63A17-7C07-3CC1-8303-417FD1026CE7)]
            [version(0x00000001)]
            interface IBlendEffect : IInspectable
            {
                [propget] HRESULT ForegroundSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT ForegroundSource([in] Lumia.Imaging.IImageProvider* value);
                [propget] HRESULT MaskSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT MaskSource([in] Lumia.Imaging.IImageProvider* value);
                [propget] HRESULT GlobalAlpha([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT GlobalAlpha([in] DOUBLE value);
                [propget] HRESULT BlendFunction([out] [retval] Lumia.Imaging.Compositing.BlendFunction* __returnValue);
                [propput] HRESULT BlendFunction([in] Lumia.Imaging.Compositing.BlendFunction value);
                [propget] HRESULT TargetArea([out] [retval] Windows.Foundation.Rect* __returnValue);
                [propput] HRESULT TargetArea([in] Windows.Foundation.Rect value);
                [propget] HRESULT TargetAreaRotation([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT TargetAreaRotation([in] DOUBLE value);
                [propget] HRESULT TargetOutputOption([out] [retval] Lumia.Imaging.OutputOption* __returnValue);
                [propput] HRESULT TargetOutputOption([in] Lumia.Imaging.OutputOption value);
            }

            [exclusiveto(Lumia.Imaging.Compositing.BlendEffect)]
            [uuid(FA483C22-15BB-3A8E-BD4C-9874277756AC)]
            [version(0x00000001)]
            interface IBlendEffectFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSources([in] Lumia.Imaging.IImageProvider* backgroundSource, [in] Lumia.Imaging.IImageProvider* foregroundSource, [out] [retval] Lumia.Imaging.Compositing.BlendEffect** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithSourcesAndBlendFunction([in] Lumia.Imaging.IImageProvider* backgroundSource, [in] Lumia.Imaging.IImageProvider* foregroundSource, [in] Lumia.Imaging.Compositing.BlendFunction blendFunction, [out] [retval] Lumia.Imaging.Compositing.BlendEffect** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithSourcesAndBlendSettings([in] Lumia.Imaging.IImageProvider* backgroundSource, [in] Lumia.Imaging.IImageProvider* foregroundSource, [in] Lumia.Imaging.Compositing.BlendFunction blendFunction, [in] DOUBLE globalAlpha, [out] [retval] Lumia.Imaging.Compositing.BlendEffect** __returnValue);
                [overload("CreateInstance")] HRESULT CreateMaskedWithSourcesAndBlendSettings([in] Lumia.Imaging.IImageProvider* backgroundSource, [in] Lumia.Imaging.IImageProvider* foregroundSource, [in] Lumia.Imaging.IImageProvider* maskSource, [in] Lumia.Imaging.Compositing.BlendFunction blendFunction, [in] DOUBLE globalAlpha, [out] [retval] Lumia.Imaging.Compositing.BlendEffect** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Compositing.BlendFilter)]
            [uuid(F556D8E4-FA8A-36C3-8C0E-4C39B5A2E8FC)]
            [version(0x00000001)]
            interface IBlendFilter : IInspectable
            {
                [propget] HRESULT ForegroundSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT ForegroundSource([in] Lumia.Imaging.IImageProvider* foregroundSource);
                [propget] HRESULT MaskSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT MaskSource([in] Lumia.Imaging.IImageProvider* maskSource);
                [propget] HRESULT Level([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Level([in] DOUBLE value);
                [propget] HRESULT BlendFunction([out] [retval] Lumia.Imaging.Compositing.BlendFunction* __returnValue);
                [propput] HRESULT BlendFunction([in] Lumia.Imaging.Compositing.BlendFunction value);
                [propget] HRESULT TargetArea([out] [retval] Windows.Foundation.Rect* __returnValue);
                [propput] HRESULT TargetArea([in] Windows.Foundation.Rect value);
                [propget] HRESULT TargetAreaRotation([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT TargetAreaRotation([in] DOUBLE value);
                [propget] HRESULT TargetOutputOption([out] [retval] Lumia.Imaging.OutputOption* __returnValue);
                [propput] HRESULT TargetOutputOption([in] Lumia.Imaging.OutputOption value);
            }

            [exclusiveto(Lumia.Imaging.Compositing.BlendFilter)]
            [uuid(B68BE117-CA1D-3D49-BB86-3EEFC0AC50E0)]
            [version(0x00000001)]
            interface IBlendFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* foregroundSource, [out] [retval] Lumia.Imaging.Compositing.BlendFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithBlendFunction([in] Lumia.Imaging.IImageProvider* foregroundSource, [in] Lumia.Imaging.Compositing.BlendFunction blendFunction, [out] [retval] Lumia.Imaging.Compositing.BlendFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithBlendSettings([in] Lumia.Imaging.IImageProvider* foregroundSource, [in] Lumia.Imaging.Compositing.BlendFunction blendFunction, [in] DOUBLE level, [out] [retval] Lumia.Imaging.Compositing.BlendFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateMaskedWithBlendSettings([in] Lumia.Imaging.IImageProvider* foregroundSource, [in] Lumia.Imaging.IImageProvider* maskSource, [in] Lumia.Imaging.Compositing.BlendFunction blendFunction, [in] DOUBLE level, [out] [retval] Lumia.Imaging.Compositing.BlendFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Compositing.ExtractedObjectImageSource)]
            [uuid(5728BE76-7383-3907-B7E7-5785332202F6)]
            [version(0x00000001)]
            interface IExtractedObjectImageSource : IInspectable
            {
                [propget] HRESULT ObjectRectangle([out] [retval] Windows.Foundation.Rect* __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Compositing.ChromaKeyFilter)]
            [uuid(C578DE9F-8011-35D7-81E4-F59F6B778D9B)]
            [version(0x00000001)]
            interface IChromaKeyFilter : IInspectable
            {
                [propget] HRESULT Color([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT Color([in] Windows.UI.Color value);
                [propget] HRESULT ColorDistance([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT ColorDistance([in] DOUBLE value);
                [propget] HRESULT NoiseSuppression([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT NoiseSuppression([in] DOUBLE value);
                [propget] HRESULT InvertAlpha([out] [retval] boolean* __returnValue);
                [propput] HRESULT InvertAlpha([in] boolean value);
            }

            [exclusiveto(Lumia.Imaging.Compositing.ChromaKeyFilter)]
            [uuid(37EB1856-2B67-3A38-A807-4BDB432D40AC)]
            [version(0x00000001)]
            interface IChromaKeyFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithExactColor([in] Windows.UI.Color color, [out] [retval] Lumia.Imaging.Compositing.ChromaKeyFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithColor([in] Windows.UI.Color color, [in] DOUBLE colorDistance, [out] [retval] Lumia.Imaging.Compositing.ChromaKeyFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithColorAndNoiseSuppression([in] Windows.UI.Color color, [in] DOUBLE colorDistance, [in] DOUBLE noiseSuppression, [out] [retval] Lumia.Imaging.Compositing.ChromaKeyFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithSettings([in] Windows.UI.Color color, [in] DOUBLE colorDistance, [in] DOUBLE noiseSuppression, [in] boolean invertAlpha, [out] [retval] Lumia.Imaging.Compositing.ChromaKeyFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Compositing.ImageFusionFilter)]
            [uuid(53B0786C-2651-35B2-8681-D6A06FB312F2)]
            [version(0x00000001)]
            interface IImageFusionFilter : IInspectable
            {
                [propget] HRESULT FusionImageSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT FusionImageSource([in] Lumia.Imaging.IImageProvider* value);
                [propget] HRESULT MaskImageSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT MaskImageSource([in] Lumia.Imaging.IImageProvider* value);
                [propget] HRESULT InvertAlpha([out] [retval] boolean* __returnValue);
                [propput] HRESULT InvertAlpha([in] boolean value);
            }

            [exclusiveto(Lumia.Imaging.Compositing.ImageFusionFilter)]
            [uuid(D2AFBC13-C5D9-3655-BD8A-B0D30AA607EA)]
            [version(0x00000001)]
            interface IImageFusionFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* fusionImageSource, [in] Lumia.Imaging.IImageProvider* maskImageSource, [in] boolean invertAlpha, [out] [retval] Lumia.Imaging.Compositing.ImageFusionFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Compositing.InteractiveSegmentationMaskRectifier)]
            [uuid(23C6A67D-78D0-3F4B-9FB8-4F2A87B8B81D)]
            [version(0x00000001)]
            interface IInteractiveSegmentationMaskRectifier : IInspectable
            {
                [propget] HRESULT AnnotationsColor([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT AnnotationsColor([in] Windows.UI.Color color);
                [propget] HRESULT AnnotationsSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT AnnotationsSource([in] Lumia.Imaging.IImageProvider* value);
                [propget] HRESULT MaskAnnotationType([out] [retval] Lumia.Imaging.MaskAnnotationType* __returnValue);
                [propput] HRESULT MaskAnnotationType([in] Lumia.Imaging.MaskAnnotationType value);
            }

            [exclusiveto(Lumia.Imaging.Compositing.InteractiveForegroundSegmenter)]
            [uuid(5E5E3761-AC14-3FE4-AF5F-0C9CC6BFBF92)]
            [version(0x00000001)]
            interface IInteractiveForegroundSegmenter : IInspectable
            {
                [propget] HRESULT ForegroundColor([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT ForegroundColor([in] Windows.UI.Color color);
                [propget] HRESULT BackgroundColor([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT BackgroundColor([in] Windows.UI.Color color);
                [propget] HRESULT AnnotationsSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT AnnotationsSource([in] Lumia.Imaging.IImageProvider* value);
                [propget] HRESULT Quality([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Quality([in] DOUBLE quality);
                HRESULT GetInteractiveSegmentationMaskRectifier([out] [retval] Lumia.Imaging.Compositing.InteractiveSegmentationMaskRectifier** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Compositing.InteractiveForegroundSegmenter)]
            [uuid(93106985-59CC-337A-894C-B60F3239A388)]
            [version(0x00000001)]
            interface IInteractiveForegroundSegmenterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.Compositing.InteractiveForegroundSegmenter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithAnnotationColors([in] Lumia.Imaging.IImageProvider* imageSource, [in] Windows.UI.Color foregroundColor, [in] Windows.UI.Color backgroundColor, [out] [retval] Lumia.Imaging.Compositing.InteractiveForegroundSegmenter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithAnnotations([in] Lumia.Imaging.IImageProvider* imageSource, [in] Windows.UI.Color foregroundColor, [in] Windows.UI.Color backgroundColor, [in] Lumia.Imaging.IImageProvider* annotationsSource, [out] [retval] Lumia.Imaging.Compositing.InteractiveForegroundSegmenter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Compositing.ObjectExtractor)]
            [uuid(CE349739-6883-3023-ADE8-2CFFC07E0195)]
            [version(0x00000001)]
            interface IObjectExtractor : IInspectable
            {
                [propget] HRESULT MaskSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT MaskSource([in] Lumia.Imaging.IImageProvider* value);
                HRESULT ExtractObjectsAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Lumia.Imaging.Compositing.ExtractedObjectImageSource*>*>** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Compositing.ObjectExtractor)]
            [uuid(174B3C6B-6313-3756-913E-2BC99AAD5232)]
            [version(0x00000001)]
            interface IObjectExtractorFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [in] Lumia.Imaging.IImageProvider* maskSource, [out] [retval] Lumia.Imaging.Compositing.ObjectExtractor** __returnValue);
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass AlphaToGrayscaleFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Compositing.IAlphaToGrayscaleFilter;
            }

            [activatable(Lumia.Imaging.Compositing.IBlendEffectFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass BlendEffect
            {
                interface Windows.Foundation.IClosable;
                interface Lumia.Imaging.IImageConsumer;
                interface Lumia.Imaging.IImageProvider;
                [default] interface Lumia.Imaging.Compositing.IBlendEffect;
            }

            [activatable(Lumia.Imaging.Compositing.IBlendFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [deprecated("This filter is deprecated and will be removed in the next version. Please use BlendEffect instead.", remove, 0x6030000)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass BlendFilter
            {
                interface Windows.Foundation.IClosable;
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Compositing.IBlendFilter;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ExtractedObjectImageSource
            {
                interface Windows.Foundation.IClosable;
                interface Lumia.Imaging.IImageProvider;
                [default] interface Lumia.Imaging.Compositing.IExtractedObjectImageSource;
            }

            [activatable(Lumia.Imaging.Compositing.IChromaKeyFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ChromaKeyFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Compositing.IChromaKeyFilter;
            }

            [activatable(Lumia.Imaging.Compositing.IImageFusionFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ImageFusionFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Compositing.IImageFusionFilter;
            }

            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass InteractiveSegmentationMaskRectifier
            {
                interface Windows.Foundation.IClosable;
                interface Lumia.Imaging.IImageProvider;
                [default] interface Lumia.Imaging.Compositing.IInteractiveSegmentationMaskRectifier;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Compositing.IInteractiveForegroundSegmenterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass InteractiveForegroundSegmenter
            {
                interface Windows.Foundation.IClosable;
                interface Lumia.Imaging.IImageConsumer;
                interface Lumia.Imaging.IImageProvider;
                [default] interface Lumia.Imaging.Compositing.IInteractiveForegroundSegmenter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Compositing.IObjectExtractorFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ObjectExtractor
            {
                interface Windows.Foundation.IClosable;
                interface Lumia.Imaging.IImageProvider;
                interface Lumia.Imaging.IImageConsumer;
                [default] interface Lumia.Imaging.Compositing.IObjectExtractor;
            }
        }
    }
}
