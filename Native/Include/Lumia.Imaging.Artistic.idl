/*
* Copyright (c) 2014 Microsoft Mobile
* 
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
* 
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
*/

//
// File generated by WinMDIDL version 8.00.0011
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Lumia.Imaging.idl";
import "Windows.UI.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__lumia2Eimaging_h__)")
cpp_quote("#include \"Lumia.Imaging.h\"")
cpp_quote("#endif // !defined(__lumia2Eimaging_h__)")
cpp_quote("#if !defined(__windows2Eui_h__)")
cpp_quote("#include <Windows.UI.h>")
cpp_quote("#endif // !defined(__windows2Eui_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Lumia
{
    namespace Imaging
    {
        interface IFilter;

        typedef enum Rotation Rotation;
    }
}
namespace Windows
{
    namespace Foundation
    {
        typedef struct Point Point;

        typedef struct Rect Rect;
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Lumia
{
    namespace Imaging
    {
        namespace Artistic
        {
            typedef enum LomoVignetting LomoVignetting;

            typedef enum LomoStyle LomoStyle;

            typedef enum OilBrushSize OilBrushSize;

            typedef enum SketchMode SketchMode;

            typedef enum WarpEffect WarpEffect;

            interface IAntiqueFilter;

            interface ICartoonFilter;

            interface ICartoonFilterFactory;

            interface IColorSwapFilter;

            interface IColorSwapFilterFactory;

            interface IEmbossFilter;

            interface IEmbossFilterFactory;

            interface IFogFilter;

            interface IFoundationFilter;

            interface IFoundationFilterFactory;

            interface IGrayscaleNegativeFilter;

            interface ILomoFilter;

            interface ILomoFilterFactory;

            interface IMagicPenFilter;

            interface IMilkyFilter;

            interface IMirrorFilter;

            interface IMonoColorFilter;

            interface IMonoColorFilterFactory;

            interface IMoonlightFilter;

            interface IMoonlightFilterFactory;

            interface INegativeFilter;

            interface IOilyFilter;

            interface IOilyFilterFactory;

            interface IPaintFilter;

            interface IPaintFilterFactory;

            interface IPosterizeFilter;

            interface IPosterizeFilterFactory;

            interface ISepiaFilter;

            interface ISketchFilter;

            interface ISketchFilterFactory;

            interface ISolarizeFilter;

            interface ISolarizeFilterFactory;

            interface ISplitToneRange;

            interface ISplitToneRangeFactory;

            interface ISplitToneFilter;

            interface ISplitToneFilterFactory;

            interface ISpotlightFilter;

            interface ISpotlightFilterFactory;

            interface IStampFilter;

            interface IStampFilterFactory;

            interface IVignettingFilter;

            interface IVignettingFilterFactory;

            interface IWarpFilter;

            interface IWarpFilterFactory;

            interface IWatercolorFilter;

            interface IWatercolorFilterFactory;

            runtimeclass AntiqueFilter;

            runtimeclass CartoonFilter;

            runtimeclass ColorSwapFilter;

            runtimeclass EmbossFilter;

            runtimeclass FogFilter;

            runtimeclass FoundationFilter;

            runtimeclass GrayscaleNegativeFilter;

            runtimeclass LomoFilter;

            runtimeclass MagicPenFilter;

            runtimeclass MilkyFilter;

            runtimeclass MirrorFilter;

            runtimeclass MonoColorFilter;

            runtimeclass MoonlightFilter;

            runtimeclass NegativeFilter;

            runtimeclass OilyFilter;

            runtimeclass PaintFilter;

            runtimeclass PosterizeFilter;

            runtimeclass SepiaFilter;

            runtimeclass SketchFilter;

            runtimeclass SolarizeFilter;

            runtimeclass SplitToneRange;

            runtimeclass SplitToneFilter;

            runtimeclass SpotlightFilter;

            runtimeclass StampFilter;

            runtimeclass VignettingFilter;

            runtimeclass WarpFilter;

            runtimeclass WatercolorFilter;
        }
    }
}

// Generic instantiations
namespace Lumia
{
    namespace Imaging
    {
        namespace Artistic
        {
            declare
            {
                interface Windows.Foundation.Collections.IIterable<Lumia.Imaging.Artistic.SplitToneRange*>;

                interface Windows.Foundation.Collections.IIterator<Lumia.Imaging.Artistic.SplitToneRange*>;

                interface Windows.Foundation.Collections.IVectorView<Lumia.Imaging.Artistic.SplitToneRange*>;

                interface Windows.Foundation.Collections.IVector<Lumia.Imaging.Artistic.SplitToneRange*>;
            }
        }
    }
}

// Type definition
namespace Lumia
{
    namespace Imaging
    {
        namespace Artistic
        {
            [version(0x00000001)]
            enum LomoVignetting
            {
                Low    = 0,
                Medium = 1,
                High   = 2
            };

            [version(0x00000001)]
            enum LomoStyle
            {
                Neutral = 0,
                Red     = 1,
                Green   = 2,
                Blue    = 3,
                Yellow  = 4
            };

            [version(0x00000001)]
            enum OilBrushSize
            {
                Small  = 0,
                Medium = 1,
                Large  = 2
            };

            [version(0x00000001)]
            enum SketchMode
            {
                Gray  = 0,
                Color = 1
            };

            [version(0x00000001)]
            enum WarpEffect
            {
                Upnose      = 0,
                Twister     = 1,
                SmallNose   = 2,
                WideSmile   = 3,
                Grit        = 4,
                BigFace     = 5,
                Professor   = 6,
                Alien       = 7,
                BigNose     = 8,
                AlienHybrid = 9,
                Gobbler     = 10,
                Square      = 11,
                Sharpchin   = 12,
                LongFaced   = 13,
                HappyFool   = 14,
                Insect      = 15
            };

            [exclusiveto(Lumia.Imaging.Artistic.AntiqueFilter)]
            [uuid(CE97F65B-4B04-34CE-BDE5-CCCA5966B51E)]
            [version(0x00000001)]
            interface IAntiqueFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Artistic.CartoonFilter)]
            [uuid(08F7CCE0-D463-36BC-98EB-BD2B46699C47)]
            [version(0x00000001)]
            interface ICartoonFilter : IInspectable
            {
                [propget] HRESULT DistinctEdges([out] [retval] boolean* __returnValue);
                [propput] HRESULT DistinctEdges([in] boolean value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.CartoonFilter)]
            [uuid(0687F447-4FB0-38E5-BD4F-BDAE1E1D4119)]
            [version(0x00000001)]
            interface ICartoonFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithDistinctEdges([in] boolean distinctEdges, [out] [retval] Lumia.Imaging.Artistic.CartoonFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.ColorSwapFilter)]
            [uuid(26C8E696-817C-3257-9D8B-52EF5A9AF9BB)]
            [version(0x00000001)]
            interface IColorSwapFilter : IInspectable
            {
                [propget] HRESULT SourceColor([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT SourceColor([in] Windows.UI.Color value);
                [propget] HRESULT SwapColor([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT SwapColor([in] Windows.UI.Color value);
                [propget] HRESULT ColorDistance([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT ColorDistance([in] DOUBLE value);
                [propget] HRESULT IsMonoColor([out] [retval] boolean* __returnValue);
                [propput] HRESULT IsMonoColor([in] boolean value);
                [propget] HRESULT SwapLuminance([out] [retval] boolean* __returnValue);
                [propput] HRESULT SwapLuminance([in] boolean value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.ColorSwapFilter)]
            [uuid(46CCDC56-347B-3B9D-AA5D-5F399FB7EE5F)]
            [version(0x00000001)]
            interface IColorSwapFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSettings([in] Windows.UI.Color sourceColor, [in] Windows.UI.Color swapColor, [in] DOUBLE colorDistance, [in] boolean isMonoColor, [in] boolean swapLuminance, [out] [retval] Lumia.Imaging.Artistic.ColorSwapFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.EmbossFilter)]
            [uuid(650F2D8A-E27F-3E07-AE4D-BE8BCAEE98D7)]
            [version(0x00000001)]
            interface IEmbossFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Level([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.EmbossFilter)]
            [uuid(79DBA3E2-882E-3BE4-9805-97D276A8DAAE)]
            [version(0x00000001)]
            interface IEmbossFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] DOUBLE level, [out] [retval] Lumia.Imaging.Artistic.EmbossFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.FogFilter)]
            [uuid(56DADCC2-B8EE-3374-BBAF-58341AFFA315)]
            [version(0x00000001)]
            interface IFogFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Artistic.FoundationFilter)]
            [uuid(68E16223-EE38-34A3-8C11-B13A16EBDB51)]
            [version(0x00000001)]
            interface IFoundationFilter : IInspectable
            {
                [propget] HRESULT Region([out] [retval] Windows.Foundation.Rect* __returnValue);
                [propput] HRESULT Region([in] Windows.Foundation.Rect value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.FoundationFilter)]
            [uuid(99671B05-65DC-3F93-A1B6-A153D80AA2C0)]
            [version(0x00000001)]
            interface IFoundationFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Rect region, [out] [retval] Lumia.Imaging.Artistic.FoundationFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.GrayscaleNegativeFilter)]
            [uuid(6FD7D767-2A73-3CB5-A581-E193BE348C77)]
            [version(0x00000001)]
            interface IGrayscaleNegativeFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Artistic.LomoFilter)]
            [uuid(3546F9DB-2FCD-352A-AB89-DCD19FBFC451)]
            [version(0x00000001)]
            interface ILomoFilter : IInspectable
            {
                [propget] HRESULT Brightness([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Brightness([in] DOUBLE value);
                [propget] HRESULT Saturation([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Saturation([in] DOUBLE value);
                [propget] HRESULT LomoVignetting([out] [retval] Lumia.Imaging.Artistic.LomoVignetting* __returnValue);
                [propput] HRESULT LomoVignetting([in] Lumia.Imaging.Artistic.LomoVignetting value);
                [propget] HRESULT LomoStyle([out] [retval] Lumia.Imaging.Artistic.LomoStyle* __returnValue);
                [propput] HRESULT LomoStyle([in] Lumia.Imaging.Artistic.LomoStyle value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.LomoFilter)]
            [uuid(6418B86E-A066-368B-A392-C10455487C0C)]
            [version(0x00000001)]
            interface ILomoFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSettings([in] DOUBLE brightness, [in] DOUBLE saturation, [in] Lumia.Imaging.Artistic.LomoVignetting vignetting, [in] Lumia.Imaging.Artistic.LomoStyle style, [out] [retval] Lumia.Imaging.Artistic.LomoFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.MagicPenFilter)]
            [uuid(D398D363-80F0-3F01-B081-5D5F4A6AC33F)]
            [version(0x00000001)]
            interface IMagicPenFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Artistic.MilkyFilter)]
            [uuid(F86F6534-02E3-3DAE-9D84-0A4A6FEC41B9)]
            [version(0x00000001)]
            interface IMilkyFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Artistic.MirrorFilter)]
            [uuid(695E4137-0C32-3D3B-893B-4E454A74C7A9)]
            [version(0x00000001)]
            interface IMirrorFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Artistic.MonoColorFilter)]
            [uuid(643B6902-CF4D-3DEB-B654-1A36752A102C)]
            [version(0x00000001)]
            interface IMonoColorFilter : IInspectable
            {
                [propget] HRESULT PreserveColor([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT PreserveColor([in] Windows.UI.Color value);
                [propget] HRESULT ColorDistance([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT ColorDistance([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.MonoColorFilter)]
            [uuid(4D1513E9-51DA-3E55-9A43-F3EA314C3780)]
            [version(0x00000001)]
            interface IMonoColorFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithColor([in] Windows.UI.Color preserveColor, [in] DOUBLE colorDistance, [out] [retval] Lumia.Imaging.Artistic.MonoColorFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.MoonlightFilter)]
            [uuid(E344521A-A24C-3C9F-B0FD-E158F18BD7A7)]
            [version(0x00000001)]
            interface IMoonlightFilter : IInspectable
            {
                [propget] HRESULT Clock([out] [retval] INT32* __returnValue);
                [propput] HRESULT Clock([in] INT32 value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.MoonlightFilter)]
            [uuid(95FDC820-EAE7-3F84-9364-AF80D755C9DA)]
            [version(0x00000001)]
            interface IMoonlightFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] INT32 clock, [out] [retval] Lumia.Imaging.Artistic.MoonlightFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.NegativeFilter)]
            [uuid(8F3B68BF-7435-3009-B055-32B2E738D38F)]
            [version(0x00000001)]
            interface INegativeFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Artistic.OilyFilter)]
            [uuid(CE1C36B3-FD31-33E1-81F5-11A49AD7426B)]
            [version(0x00000001)]
            interface IOilyFilter : IInspectable
            {
                [propget] HRESULT OilBrushSize([out] [retval] Lumia.Imaging.Artistic.OilBrushSize* __returnValue);
                [propput] HRESULT OilBrushSize([in] Lumia.Imaging.Artistic.OilBrushSize value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.OilyFilter)]
            [uuid(C5D8B852-641F-3886-B9D2-B18823DF4BAF)]
            [version(0x00000001)]
            interface IOilyFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithBrushSize([in] Lumia.Imaging.Artistic.OilBrushSize oilBrushSize, [out] [retval] Lumia.Imaging.Artistic.OilyFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.PaintFilter)]
            [uuid(B7CC23E4-4ED5-3D13-ADD9-A2F9863F385B)]
            [version(0x00000001)]
            interface IPaintFilter : IInspectable
            {
                [propget] HRESULT Level([out] [retval] INT32* __returnValue);
                [propput] HRESULT Level([in] INT32 value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.PaintFilter)]
            [uuid(5D26A5D4-CACB-36F4-806C-9A630545A787)]
            [version(0x00000001)]
            interface IPaintFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithLevel([in] INT32 level, [out] [retval] Lumia.Imaging.Artistic.PaintFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.PosterizeFilter)]
            [uuid(EB2018EC-A8BC-35A7-B5AB-F480D2BD02AB)]
            [version(0x00000001)]
            interface IPosterizeFilter : IInspectable
            {
                [propget] HRESULT ColorComponentValueCount([out] [retval] INT32* __returnValue);
                [propput] HRESULT ColorComponentValueCount([in] INT32 value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.PosterizeFilter)]
            [uuid(03F5E66E-976E-3C93-B70E-75079728511B)]
            [version(0x00000001)]
            interface IPosterizeFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithColorComponentCount([in] INT32 colorComponentValueCount, [out] [retval] Lumia.Imaging.Artistic.PosterizeFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SepiaFilter)]
            [uuid(943A6845-29CA-3235-A0BD-C0865CDA2BF9)]
            [version(0x00000001)]
            interface ISepiaFilter : IInspectable
            {
            }

            [exclusiveto(Lumia.Imaging.Artistic.SketchFilter)]
            [uuid(818046B9-AA3C-356D-8CA2-38BBC620A5A0)]
            [version(0x00000001)]
            interface ISketchFilter : IInspectable
            {
                [propget] HRESULT SketchMode([out] [retval] Lumia.Imaging.Artistic.SketchMode* __returnValue);
                [propput] HRESULT SketchMode([in] Lumia.Imaging.Artistic.SketchMode value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SketchFilter)]
            [uuid(BE4D3701-D392-34B9-B0A2-56FF668989E6)]
            [version(0x00000001)]
            interface ISketchFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSketchMode([in] Lumia.Imaging.Artistic.SketchMode sketchMode, [out] [retval] Lumia.Imaging.Artistic.SketchFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SolarizeFilter)]
            [uuid(83B5E216-8219-3F3A-9054-6714396C42B2)]
            [version(0x00000001)]
            interface ISolarizeFilter : IInspectable
            {
                [propget] HRESULT Threshold([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Threshold([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SolarizeFilter)]
            [uuid(43F86BA1-D14B-39F7-8E89-7ED2F2F61424)]
            [version(0x00000001)]
            interface ISolarizeFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithThreshold([in] DOUBLE threshold, [out] [retval] Lumia.Imaging.Artistic.SolarizeFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SplitToneRange)]
            [uuid(DB5E4F89-2EA8-3EF0-A416-66B2BBF9D422)]
            [version(0x00000001)]
            interface ISplitToneRange : IInspectable
            {
                [propget] HRESULT LuminanceLow([out] [retval] BYTE* __returnValue);
                [propput] HRESULT LuminanceLow([in] BYTE value);
                [propget] HRESULT LuminanceHigh([out] [retval] BYTE* __returnValue);
                [propput] HRESULT LuminanceHigh([in] BYTE value);
                [propget] HRESULT Color([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT Color([in] Windows.UI.Color value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SplitToneRange)]
            [uuid(692656BC-6A78-3B8B-9835-E835E944C077)]
            [version(0x00000001)]
            interface ISplitToneRangeFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSettings([in] BYTE luminanceLow, [in] BYTE luminanceHigh, [in] Windows.UI.Color color, [out] [retval] Lumia.Imaging.Artistic.SplitToneRange** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SplitToneFilter)]
            [uuid(82CBAA79-88A7-357F-BC6D-CC94FB38111B)]
            [version(0x00000001)]
            interface ISplitToneFilter : IInspectable
            {
                [propget] HRESULT SplitToneRanges([out] [retval] Windows.Foundation.Collections.IVector<Lumia.Imaging.Artistic.SplitToneRange*>** __returnValue);
                [propput] HRESULT SplitToneRanges([in] Windows.Foundation.Collections.IVector<Lumia.Imaging.Artistic.SplitToneRange*>* value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SplitToneFilter)]
            [uuid(3E9C1108-6577-3D2D-AC31-6C314A2DE797)]
            [version(0x00000001)]
            interface ISplitToneFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithRanges([in] Windows.Foundation.Collections.IVector<Lumia.Imaging.Artistic.SplitToneRange*>* splitToneRanges, [out] [retval] Lumia.Imaging.Artistic.SplitToneFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SpotlightFilter)]
            [uuid(E8DAAA20-D7BA-3A68-B68E-AB9D700190DF)]
            [version(0x00000001)]
            interface ISpotlightFilter : IInspectable
            {
                [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* __returnValue);
                [propput] HRESULT Position([in] Windows.Foundation.Point value);
                [propget] HRESULT Radius([out] [retval] INT32* __returnValue);
                [propput] HRESULT Radius([in] INT32 value);
                [propget] HRESULT TransitionSize([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT TransitionSize([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.SpotlightFilter)]
            [uuid(985352C6-A979-34F8-A487-BE7801D7582A)]
            [version(0x00000001)]
            interface ISpotlightFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSettings([in] Windows.Foundation.Point position, [in] INT32 radius, [in] DOUBLE transitionSize, [out] [retval] Lumia.Imaging.Artistic.SpotlightFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.StampFilter)]
            [uuid(9F96E62B-473F-3879-9F0F-26D1075ECEAA)]
            [version(0x00000001)]
            interface IStampFilter : IInspectable
            {
                [propget] HRESULT Smoothness([out] [retval] INT32* __returnValue);
                [propput] HRESULT Smoothness([in] INT32 value);
                [propget] HRESULT Threshold([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Threshold([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.StampFilter)]
            [uuid(8F76A75A-383B-3F97-A7F0-BD24300EBDBF)]
            [version(0x00000001)]
            interface IStampFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithSettings([in] INT32 smoothness, [in] DOUBLE threshold, [out] [retval] Lumia.Imaging.Artistic.StampFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.VignettingFilter)]
            [uuid(D6FD5D2E-ECED-30DB-B8D9-C6C274761C27)]
            [version(0x00000001)]
            interface IVignettingFilter : IInspectable
            {
                [propget] HRESULT TransitionSize([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT TransitionSize([in] DOUBLE value);
                [propget] HRESULT Color([out] [retval] Windows.UI.Color* __returnValue);
                [propput] HRESULT Color([in] Windows.UI.Color value);
                [propget] HRESULT Region([out] [retval] Windows.Foundation.Rect* __returnValue);
                [propput] HRESULT Region([in] Windows.Foundation.Rect value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.VignettingFilter)]
            [uuid(602DD292-3943-3A67-91F2-8D4604AE1524)]
            [version(0x00000001)]
            interface IVignettingFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] DOUBLE transitionSize, [in] Windows.UI.Color color, [out] [retval] Lumia.Imaging.Artistic.VignettingFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithRegion([in] DOUBLE transitionSize, [in] Windows.UI.Color color, [in] Windows.Foundation.Rect region, [out] [retval] Lumia.Imaging.Artistic.VignettingFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.WarpFilter)]
            [uuid(A2D07684-4162-3AA8-9026-30F7E968877A)]
            [version(0x00000001)]
            interface IWarpFilter : IInspectable
            {
                [propget] HRESULT WarpEffect([out] [retval] Lumia.Imaging.Artistic.WarpEffect* __returnValue);
                [propput] HRESULT WarpEffect([in] Lumia.Imaging.Artistic.WarpEffect value);
                [propget] HRESULT Level([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Level([in] DOUBLE value);
                [propget] HRESULT Rotation([out] [retval] Lumia.Imaging.Rotation* __returnValue);
                [propput] HRESULT Rotation([in] Lumia.Imaging.Rotation value);
                [propget] HRESULT Regions([out] [retval] Windows.Foundation.Collections.IVector<Windows.Foundation.Rect>** __returnValue);
                [propput] HRESULT Regions([in] Windows.Foundation.Collections.IVector<Windows.Foundation.Rect>* value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.WarpFilter)]
            [uuid(01CEEFB8-209F-32A2-BDDA-AA4DED7FFD5E)]
            [version(0x00000001)]
            interface IWarpFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.Artistic.WarpEffect effect, [in] DOUBLE level, [out] [retval] Lumia.Imaging.Artistic.WarpFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithRegions([in] Lumia.Imaging.Artistic.WarpEffect effect, [in] DOUBLE level, [in] Lumia.Imaging.Rotation rotation, [in] Windows.Foundation.Collections.IVector<Windows.Foundation.Rect>* regions, [out] [retval] Lumia.Imaging.Artistic.WarpFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Artistic.WatercolorFilter)]
            [uuid(72EFA59D-D269-3276-8BA4-18E9E6541F1A)]
            [version(0x00000001)]
            interface IWatercolorFilter : IInspectable
            {
                [propget] HRESULT LightIntensity([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT LightIntensity([in] DOUBLE value);
                [propget] HRESULT ColorIntensity([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT ColorIntensity([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Artistic.WatercolorFilter)]
            [uuid(863A5C1C-2CF6-35B1-A66B-5A5098342820)]
            [version(0x00000001)]
            interface IWatercolorFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithIntensities([in] DOUBLE lightIntensity, [in] DOUBLE colorIntensity, [out] [retval] Lumia.Imaging.Artistic.WatercolorFilter** __returnValue);
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass AntiqueFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IAntiqueFilter;
            }

            [activatable(Lumia.Imaging.Artistic.ICartoonFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass CartoonFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.ICartoonFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Artistic.IColorSwapFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ColorSwapFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IColorSwapFilter;
            }

            [activatable(Lumia.Imaging.Artistic.IEmbossFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass EmbossFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IEmbossFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass FogFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IFogFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Artistic.IFoundationFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass FoundationFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IFoundationFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass GrayscaleNegativeFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IGrayscaleNegativeFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Artistic.ILomoFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass LomoFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.ILomoFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass MagicPenFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IMagicPenFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass MilkyFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IMilkyFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass MirrorFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IMirrorFilter;
            }

            [activatable(Lumia.Imaging.Artistic.IMonoColorFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass MonoColorFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IMonoColorFilter;
            }

            [activatable(Lumia.Imaging.Artistic.IMoonlightFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass MoonlightFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IMoonlightFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass NegativeFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.INegativeFilter;
            }

            [activatable(Lumia.Imaging.Artistic.IOilyFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass OilyFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IOilyFilter;
            }

            [activatable(Lumia.Imaging.Artistic.IPaintFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass PaintFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IPaintFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Artistic.IPosterizeFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass PosterizeFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IPosterizeFilter;
            }

            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass SepiaFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.ISepiaFilter;
            }

            [activatable(Lumia.Imaging.Artistic.ISketchFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass SketchFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.ISketchFilter;
            }

            [activatable(Lumia.Imaging.Artistic.ISolarizeFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass SolarizeFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.ISolarizeFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Artistic.ISplitToneRangeFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass SplitToneRange
            {
                [default] interface Lumia.Imaging.Artistic.ISplitToneRange;
            }

            [activatable(Lumia.Imaging.Artistic.ISplitToneFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass SplitToneFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.ISplitToneFilter;
            }

            [activatable(Lumia.Imaging.Artistic.ISpotlightFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass SpotlightFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.ISpotlightFilter;
            }

            [activatable(Lumia.Imaging.Artistic.IStampFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass StampFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IStampFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Artistic.IVignettingFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass VignettingFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IVignettingFilter;
            }

            [activatable(Lumia.Imaging.Artistic.IWarpFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass WarpFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IWarpFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Artistic.IWatercolorFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass WatercolorFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Artistic.IWatercolorFilter;
            }
        }
    }
}
