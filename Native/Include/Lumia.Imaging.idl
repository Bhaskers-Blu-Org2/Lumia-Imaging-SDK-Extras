/*
Copyright (c) 2014 Microsoft Mobile
 
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// 14a955a8c166572ba70fae472486786fbe39ddda Fri, 12 Dec 2014 18:46:36 +0100

//
// File generated by WinMDIDL version 8.00.0011
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Lumia.Imaging.Transforms.idl";
import "Windows.Media.idl";
import "Windows.Media.Capture.idl";
import "Windows.Media.Devices.idl";
import "Windows.Media.MediaProperties.idl";
import "Windows.Storage.idl";
import "Windows.Storage.Streams.idl";
import "Windows.UI.idl";
import "Windows.UI.Xaml.Media.Imaging.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__lumia2Eimaging2Etransforms_h__)")
cpp_quote("#include \"Lumia.Imaging.Transforms.h\"")
cpp_quote("#endif // !defined(__lumia2Eimaging2Etransforms_h__)")
cpp_quote("#if !defined(__windows2Emedia_h__)")
cpp_quote("#include <Windows.Media.h>")
cpp_quote("#endif // !defined(__windows2Emedia_h__)")
cpp_quote("#if !defined(__windows2Emedia2Ecapture_h__)")
cpp_quote("#include <Windows.Media.Capture.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Ecapture_h__)")
cpp_quote("#if !defined(__windows2Emedia2Edevices_h__)")
cpp_quote("#include <Windows.Media.Devices.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Edevices_h__)")
cpp_quote("#if !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#include <Windows.Media.MediaProperties.h>")
cpp_quote("#endif // !defined(__windows2Emedia2Emediaproperties_h__)")
cpp_quote("#if !defined(__windows2Estorage_h__)")
cpp_quote("#include <Windows.Storage.h>")
cpp_quote("#endif // !defined(__windows2Estorage_h__)")
cpp_quote("#if !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#include <Windows.Storage.Streams.h>")
cpp_quote("#endif // !defined(__windows2Estorage2Estreams_h__)")
cpp_quote("#if !defined(__windows2Eui_h__)")
cpp_quote("#include <Windows.UI.h>")
cpp_quote("#endif // !defined(__windows2Eui_h__)")
cpp_quote("#if !defined(__windows2Eui2Examl2Emedia2Eimaging_h__)")
cpp_quote("#include <Windows.UI.Xaml.Media.Imaging.h>")
cpp_quote("#endif // !defined(__windows2Eui2Examl2Emedia2Eimaging_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Lumia
{
    namespace Imaging
    {
        namespace Transforms
        {
            typedef enum FlipMode FlipMode;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        namespace Collections
        {
            interface IPropertySet;
        }
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IAsyncAction;

        interface IClosable;

        interface IStringable;

        typedef struct Point Point;

        typedef struct Rect Rect;

        typedef struct Size Size;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Capture
        {
            runtimeclass MediaCaptureInitializationSettings;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        namespace Devices
        {
            interface IMediaDeviceController;
        }
    }
}
namespace Windows
{
    namespace Media
    {
        interface IMediaExtension;
    }
}
namespace Windows
{
    namespace Media
    {
        namespace MediaProperties
        {
            runtimeclass MediaEncodingProfile;

            runtimeclass VideoEncodingProperties;
        }
    }
}
namespace Windows
{
    namespace Storage
    {
        interface IStorageFile;
    }
}
namespace Windows
{
    namespace Storage
    {
        namespace Streams
        {
            interface IBuffer;

            interface IRandomAccessStream;
        }
    }
}
namespace Windows
{
    namespace UI
    {
        typedef struct Color Color;
    }
}
namespace Windows
{
    namespace UI
    {
        namespace Xaml
        {
            namespace Media
            {
                namespace Imaging
                {
                    runtimeclass WriteableBitmap;
                }
            }
        }
    }
}
namespace Lumia
{
    namespace Imaging
    {
        typedef enum ColorMode ColorMode;

        typedef enum OutputOption OutputOption;

        typedef enum AnimationFrameDithering AnimationFrameDithering;

        typedef enum ColorSpace ColorSpace;

        typedef enum AutoResizeMode AutoResizeMode;

        typedef enum ImageFormat ImageFormat;

        typedef enum MaskAnnotationType MaskAnnotationType;

        typedef enum JpegOutputColorMode JpegOutputColorMode;

        typedef enum Rotation Rotation;

        typedef enum JpegOperation JpegOperation;

        typedef struct Margins Margins;

        typedef struct GradientStop GradientStop;

        typedef struct RampedRange RampedRange;

        delegate PreviewFrameAvailableDelegate;

        interface IPixelBufferInfo;

        interface IReadableBitmap;

        interface IBitmap;

        interface IBitmapFactory;

        interface IImageProvider;

        interface IRenderRequest;

        interface IFilter;

        interface IImageConsumer;

        interface IFilterEffect;

        interface IAnimationFrame;

        interface IAnimationFrameFactory;

        interface IAutoResizeConfiguration;

        interface IAutoResizeConfigurationFactory;

        interface IColorModeDescriptor;

        interface IColorModeDescriptorFactory;

        interface IColorPlaneDescriptor;

        interface IImageSize;

        interface IBitmapImageSource;

        interface IBitmapImageSourceFactory;

        interface IBitmapProviderImageSource;

        interface IBitmapProviderImageSourceFactory;

        interface IReadableBitmapProvider;

        interface IBitmapRenderer;

        interface IBitmapRendererFactory;

        interface IDiagnosticsReport;

        interface IDiagnosticsReportStatics;

        interface IActiveFrame;

        interface IBufferImageSource;

        interface IBufferImageSourceFactory;

        interface IBufferProviderImageSource;

        interface IBufferProviderImageSourceFactory;

        interface IBufferProvider;

        interface ICachingEffect;

        interface ICachingEffectFactory;

        interface IGradient;

        interface IColorImageSource;

        interface IColorImageSourceFactory;

        interface IVersion;

        interface IVersionFactory;

        interface ISdkInfo;

        interface ISdkInfoStatics;

        interface IEllipseRadius;

        interface IEllipseRadiusFactory;

        interface IFilterEffectFactory;

        interface IGifRenderer;

        interface IGifRendererFactory;

        interface ILinearGradient;

        interface ILinearGradientFactory;

        interface IRadialGradient;

        interface IRadialGradientFactory;

        interface IGradientImageSource;

        interface IGradientImageSourceFactory;

        interface IImageProviderInfo;

        interface IJpegRenderer;

        interface IJpegRendererFactory;

        interface IJpegTools;

        interface IJpegToolsStatics;

        interface IRandomAccessStreamImageSource;

        interface IRandomAccessStreamImageSourceFactory;

        interface IStorageFileImageSource;

        interface IStorageFileImageSourceFactory;

        interface IMediaCapture;

        interface ICameraPreviewImageSource;

        interface ICameraPreviewImageSourceProtectedNonVirtuals;

        interface IWriteableBitmapRenderer;

        interface IWriteableBitmapRendererFactory;

        runtimeclass PixelBufferInfo;

        runtimeclass Bitmap;

        runtimeclass RenderRequest;

        runtimeclass AnimationFrame;

        runtimeclass AutoResizeConfiguration;

        runtimeclass ColorModeDescriptor;

        runtimeclass ColorPlaneDescriptor;

        runtimeclass BitmapImageSource;

        runtimeclass BitmapProviderImageSource;

        runtimeclass BitmapRenderer;

        runtimeclass DiagnosticsReport;

        runtimeclass BufferImageSource;

        runtimeclass BufferProviderImageSource;

        runtimeclass CachingEffect;

        runtimeclass ColorImageSource;

        runtimeclass Version;

        runtimeclass SdkInfo;

        runtimeclass EllipseRadius;

        runtimeclass FilterEffect;

        runtimeclass GifRenderer;

        runtimeclass LinearGradient;

        runtimeclass RadialGradient;

        runtimeclass GradientImageSource;

        runtimeclass ImageProviderInfo;

        runtimeclass JpegRenderer;

        runtimeclass JpegTools;

        runtimeclass RandomAccessStreamImageSource;

        runtimeclass StorageFileImageSource;

        runtimeclass CameraPreviewImageSource;

        runtimeclass WriteableBitmapRenderer;
    }
}

// Generic instantiations
namespace Lumia
{
    namespace Imaging
    {
        declare
        {
            interface Windows.Foundation.Collections.IIterable<Lumia.Imaging.ColorPlaneDescriptor*>;

            interface Windows.Foundation.Collections.IIterable<Lumia.Imaging.IFilter*>;

            interface Windows.Foundation.Collections.IIterable<Lumia.Imaging.IImageProvider*>;

            interface Windows.Foundation.Collections.IIterator<Lumia.Imaging.ColorPlaneDescriptor*>;

            interface Windows.Foundation.Collections.IIterator<Lumia.Imaging.IFilter*>;

            interface Windows.Foundation.Collections.IIterator<Lumia.Imaging.IImageProvider*>;

            interface Windows.Foundation.Collections.IVectorView<Lumia.Imaging.ColorPlaneDescriptor*>;

            interface Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>;

            interface Windows.Foundation.IAsyncOperation<Lumia.Imaging.Bitmap*>;

            interface Windows.Foundation.IAsyncOperation<Lumia.Imaging.DiagnosticsReport*>;

            interface Windows.Foundation.IAsyncOperation<Lumia.Imaging.IReadableBitmap*>;

            interface Windows.Foundation.IAsyncOperation<Lumia.Imaging.ImageProviderInfo*>;

            interface Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>*>;
        }
    }
}

// Type definition
namespace Lumia
{
    namespace Imaging
    {
        [version(0x00000001)]
        enum ColorMode
        {
            Ayuv4444      = 0,
            Rgb565        = 1,
            Rgb565D       = 2,
            Argb8888      = 3,
            Bgra8888      = 4,
            Pbgra8888     = 5,
            Gray8         = 6,
            Gray16        = 7,
            Gray32        = 8,
            Yuv422P       = 9,
            Yuv420Sp      = 10,
            Yvu420Sp      = 11,
            Yuv422Sp      = 12,
            Yvu422Sp      = 13,
            Yuv420P       = 14,
            Yuv444P       = 15,
            Yuv422_Y1UY2V = 16,
            Y             = 17,
            U             = 18,
            V             = 19,
            Uv            = 20,
            Vu            = 21,
            Float16       = 22,
            Float32       = 23
        };

        [version(0x00000001)]
        enum OutputOption
        {
            PreserveAspectRatio = 0,
            Stretch             = 1,
            PreserveSize        = 2
        };

        [version(0x00000001)]
        enum AnimationFrameDithering
        {
            UseRendererSetting = 0,
            On                 = 1,
            Off                = 2
        };

        [version(0x00000001)]
        enum ColorSpace
        {
            Undefined = 0,
            Yuv420    = 1,
            Yuv422    = 2,
            Yuv422ROT = 3,
            Yuv444    = 4,
            Yuv400    = 5
        };

        [version(0x00000001)]
        enum AutoResizeMode
        {
            Automatic                     = 0,
            PreserveSourceEncodingQuality = 1,
            PrioritizeLargeImageSize      = 2,
            PrioritizeHighEncodingQuality = 3
        };

        [version(0x00000001)]
        enum ImageFormat
        {
            Undefined = 0,
            Jpeg      = 1,
            Png       = 2,
            Gif       = 3,
            Bmp       = 4,
            Wbmp      = 5,
            Tiff      = 6
        };

        [version(0x00000001)]
        enum MaskAnnotationType
        {
            Foreground = 0,
            Background = 1
        };

        [version(0x00000001)]
        enum JpegOutputColorMode
        {
            Yuv420    = 0,
            Yuv422    = 1,
            Grayscale = 2
        };

        [version(0x00000001)]
        enum Rotation
        {
            Rotate0   = 0,
            Rotate90  = 1,
            Rotate180 = 2,
            Rotate270 = 3
        };

        [version(0x00000001)]
        enum JpegOperation
        {
            Lossless   = 0,
            AllowLossy = 1
        };

        [version(0x00000001)]
        struct Margins
        {
            UINT32 Left;
            UINT32 Top;
            UINT32 Right;
            UINT32 Bottom;
        };

        [version(0x00000001)]
        struct GradientStop
        {
            DOUBLE Offset;
            Windows.UI.Color Color;
        };

        [version(0x00000001)]
        struct RampedRange
        {
            DOUBLE BeginRamp;
            DOUBLE BeginSustain;
            DOUBLE EndSustain;
            DOUBLE EndRamp;
        };

        [uuid(9783F5CC-161F-3B0C-B1CD-AA04DCC227A4)]
        [version(0x00000001)]
        delegate
            HRESULT PreviewFrameAvailableDelegate([in] Lumia.Imaging.IImageSize* imageSize);

        [exclusiveto(Lumia.Imaging.PixelBufferInfo)]
        [uuid(3782CBCC-2E26-3766-9071-8D1DFFE2525B)]
        [version(0x00000001)]
        interface IPixelBufferInfo : IInspectable
        {
            [propget] HRESULT Buffer([out] [retval] Windows.Storage.Streams.IBuffer** __returnValue);
            [propget] HRESULT ColorMode([out] [retval] Lumia.Imaging.ColorMode* __returnValue);
            [propget] HRESULT Pitch([out] [retval] UINT32* __returnValue);
        }

        [uuid(6D2C6FEF-009A-3008-85E5-2C866F548488)]
        [version(0x00000001)]
        interface IReadableBitmap : IInspectable
        {
            [propget] HRESULT Dimensions([out] [retval] Windows.Foundation.Size* __returnValue);
            [propget] HRESULT ColorMode([out] [retval] Lumia.Imaging.ColorMode* __returnValue);
        }

        [exclusiveto(Lumia.Imaging.Bitmap)]
        [uuid(515FB43C-7354-3197-BFE4-357B51DE9DB4)]
        [version(0x00000001)]
        interface IBitmap : IInspectable
        {
            HRESULT CopyDataFrom([in] Lumia.Imaging.IReadableBitmap* sourceBitmap);
            HRESULT ConvertFrom([in] Lumia.Imaging.Bitmap* sourceBitmap);
            [propget] HRESULT Buffers([out] UINT32* ____returnValueSize, [out] [retval] [size_is(, *____returnValueSize)] Lumia.Imaging.PixelBufferInfo*** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.Bitmap)]
        [uuid(97D713B7-762F-3354-90D6-4C6CF4EE0A25)]
        [version(0x00000001)]
        interface IBitmapFactory : IInspectable
        {
            [default_overload] [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Size size, [in] Lumia.Imaging.ColorMode colorMode, [out] [retval] Lumia.Imaging.Bitmap** __returnValue);
            [default_overload] [overload("CreateInstance")] HRESULT CreateFromBuffer([in] Windows.Foundation.Size size, [in] Lumia.Imaging.ColorMode colorMode, [in] UINT32 scanlineByteSize, [in] Windows.Storage.Streams.IBuffer* pixels, [out] [retval] Lumia.Imaging.Bitmap** __returnValue);
            [overload("CreateInstance")] HRESULT CreatePlanarFromBuffer([in] Windows.Foundation.Size size, [in] Lumia.Imaging.ColorMode colorMode, [in] UINT32 __scanlineByteSizesSize, [in] [size_is(__scanlineByteSizesSize)] UINT32* scanlineByteSizes, [in] UINT32 __colorPlanesSize, [in] [size_is(__colorPlanesSize)] Windows.Storage.Streams.IBuffer** colorPlanes, [out] [retval] Lumia.Imaging.Bitmap** __returnValue);
            [overload("CreateInstance")] HRESULT CreateCropped([in] Lumia.Imaging.Bitmap* sourceBitmap, [in] Windows.Foundation.Rect cropArea, [out] [retval] Lumia.Imaging.Bitmap** __returnValue);
        }

        [uuid(4717AFFE-A0FC-39B0-8292-B80C8E3C39A8)]
        [version(0x00000001)]
        interface IImageProvider : IInspectable
        {
            HRESULT PreloadAsync([out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            HRESULT GetBitmapAsync([in] Lumia.Imaging.Bitmap* bitmap, [in] Lumia.Imaging.OutputOption outputOption, [out] [retval] Windows.Foundation.IAsyncOperation<Lumia.Imaging.Bitmap*>** __returnValue);
            HRESULT GetInfoAsync([out] [retval] Windows.Foundation.IAsyncOperation<Lumia.Imaging.ImageProviderInfo*>** __returnValue);
            HRESULT Lock([in] Lumia.Imaging.RenderRequest* renderRequest, [out] [retval] boolean* __returnValue);
        }

        [exclusiveto(Lumia.Imaging.RenderRequest)]
        [uuid(1E600B15-AC58-36DA-A465-58E09317B4B2)]
        [version(0x00000001)]
        interface IRenderRequest : IInspectable
        {
        }

        [uuid(D70D4275-9BC7-3DF4-824B-9BA1734C273C)]
        [version(0x00000001)]
        interface IFilter : IInspectable
        {
            HRESULT PrepareAsync([out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            HRESULT Apply([in] Lumia.Imaging.IFilterEffect* filterEffect);
            HRESULT Lock([in] Lumia.Imaging.RenderRequest* renderRequest, [out] [retval] boolean* __returnValue);
        }

        [uuid(290055B7-81BE-3F41-A2DF-ACF0C60871FD)]
        [version(0x00000001)]
        interface IImageConsumer : IInspectable
        {
            [propget] HRESULT Source([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
            [propput] HRESULT Source([in] Lumia.Imaging.IImageProvider* imageProvider);
        }

        [uuid(72CB0DF5-687A-3091-9BF3-EEFE62F72466)]
        [version(0x00000001)]
        interface IFilterEffect : IInspectable
            requires
                Lumia.Imaging.IImageConsumer,
                Lumia.Imaging.IImageProvider
        {
            [propget] HRESULT Filters([out] [retval] Windows.Foundation.Collections.IIterable<Lumia.Imaging.IFilter*>** __returnValue);
            [propput] HRESULT Filters([in] Windows.Foundation.Collections.IIterable<Lumia.Imaging.IFilter*>* value);
        }

        [exclusiveto(Lumia.Imaging.AnimationFrame)]
        [uuid(B895FC0F-C3C0-3E75-8229-B6343E5F83AB)]
        [version(0x00000001)]
        interface IAnimationFrame : IInspectable
        {
            [propget] HRESULT Position([out] [retval] Windows.Foundation.Point* __returnValue);
            [propput] HRESULT Position([in] Windows.Foundation.Point position);
            [propget] HRESULT Dithering([out] [retval] Lumia.Imaging.AnimationFrameDithering* __returnValue);
            [propput] HRESULT Dithering([in] Lumia.Imaging.AnimationFrameDithering value);
            [propget] HRESULT Duration([out] [retval] INT32* __returnValue);
            [propput] HRESULT Duration([in] INT32 duration);
        }

        [exclusiveto(Lumia.Imaging.AnimationFrame)]
        [uuid(5AF2043C-E4A4-349C-89E4-AB51F3C4E031)]
        [version(0x00000001)]
        interface IAnimationFrameFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.AnimationFrame** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithDuration([in] Lumia.Imaging.IImageProvider* imageSource, [in] INT32 duration, [out] [retval] Lumia.Imaging.AnimationFrame** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithDurationAndPosition([in] Lumia.Imaging.IImageProvider* imageSource, [in] INT32 duration, [in] Windows.Foundation.Point position, [out] [retval] Lumia.Imaging.AnimationFrame** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.AutoResizeConfiguration)]
        [uuid(2951FFAB-22EE-3096-9B1F-38387B714D5E)]
        [version(0x00000001)]
        interface IAutoResizeConfiguration : IInspectable
        {
            [propget] HRESULT MaxBufferSize([out] [retval] UINT32* __returnValue);
            [propput] HRESULT MaxBufferSize([in] UINT32 maxBufferSize);
            [propget] HRESULT MaxImageSize([out] [retval] Windows.Foundation.Size* __returnValue);
            [propput] HRESULT MaxImageSize([in] Windows.Foundation.Size maxImageSize);
            [propget] HRESULT MinImageSize([out] [retval] Windows.Foundation.Size* __returnValue);
            [propput] HRESULT MinImageSize([in] Windows.Foundation.Size minImageSize);
            [propget] HRESULT ResizeMode([out] [retval] Lumia.Imaging.AutoResizeMode* __returnValue);
            [propput] HRESULT ResizeMode([in] Lumia.Imaging.AutoResizeMode resizeMode);
            [propget] HRESULT MinEncodingQuality([out] [retval] DOUBLE* __returnValue);
            [propput] HRESULT MinEncodingQuality([in] DOUBLE minEncodingQuality);
            [propget] HRESULT ColorSpacing([out] [retval] Lumia.Imaging.ColorSpace* __returnValue);
            [propput] HRESULT ColorSpacing([in] Lumia.Imaging.ColorSpace colorSpace);
        }

        [exclusiveto(Lumia.Imaging.AutoResizeConfiguration)]
        [uuid(EB7D6F46-3FED-3DCC-B8FA-C414FBF5CBF1)]
        [version(0x00000001)]
        interface IAutoResizeConfigurationFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateWithSettings([in] UINT32 maxBufferSize, [in] Windows.Foundation.Size maxImageSize, [in] Windows.Foundation.Size minImageSize, [in] Lumia.Imaging.AutoResizeMode resizeMode, [in] DOUBLE minEncodingQuality, [in] Lumia.Imaging.ColorSpace colorSpacing, [out] [retval] Lumia.Imaging.AutoResizeConfiguration** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.ColorModeDescriptor)]
        [uuid(E0F06EF0-0C19-3FCB-8EC4-6624D8FEB72E)]
        [version(0x00000001)]
        interface IColorModeDescriptor : IInspectable
        {
            [propget] HRESULT BitsPerPixel([out] [retval] INT32* __returnValue);
            [propget] HRESULT BytesPerPixel([out] [retval] INT32* __returnValue);
            [propget] HRESULT PlaneDescriptors([out] [retval] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.ColorPlaneDescriptor*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.ColorModeDescriptor)]
        [uuid(E184B648-517C-398E-BE62-BD78AF0281C6)]
        [version(0x00000001)]
        interface IColorModeDescriptorFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.ColorMode colorMode, [out] [retval] Lumia.Imaging.ColorModeDescriptor** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.ColorPlaneDescriptor)]
        [uuid(C9B8AD03-18D2-34AB-8FC3-1631DE946B1D)]
        [version(0x00000001)]
        interface IColorPlaneDescriptor : IInspectable
        {
            [propget] HRESULT ColorMode([out] [retval] Lumia.Imaging.ColorMode* __returnValue);
            [propget] HRESULT BitsPerSample([out] [retval] INT32* __returnValue);
            [propget] HRESULT BytesPerSample([out] [retval] INT32* __returnValue);
            HRESULT GetSize([in] Windows.Foundation.Size imageSize, [out] [retval] Windows.Foundation.Size* __returnValue);
        }

        [uuid(F92FF97F-2B7B-33AC-BDED-FB931C574B9C)]
        [version(0x00000001)]
        interface IImageSize : IInspectable
        {
            [propget] HRESULT Size([out] [retval] Windows.Foundation.Size* __returnValue);
            [propput] HRESULT Size([in] Windows.Foundation.Size size);
            [propget] HRESULT CanSetSize([out] [retval] boolean* __returnValue);
        }

        [exclusiveto(Lumia.Imaging.BitmapImageSource)]
        [uuid(AF533BCB-8D7B-36B1-9213-EB586AA96471)]
        [version(0x00000001)]
        interface IBitmapImageSource : IInspectable
        {
            [propget] HRESULT Bitmap([out] [retval] Lumia.Imaging.IReadableBitmap** __returnValue);
            [propput] HRESULT Bitmap([in] Lumia.Imaging.IReadableBitmap* value);
            HRESULT Invalidate();
        }

        [exclusiveto(Lumia.Imaging.BitmapImageSource)]
        [uuid(D4F69192-B242-3591-9A8E-03DD846BD0B1)]
        [version(0x00000001)]
        interface IBitmapImageSourceFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IReadableBitmap* bitmap, [out] [retval] Lumia.Imaging.BitmapImageSource** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.BitmapProviderImageSource)]
        [uuid(EBCA5203-EFE2-3F6C-8263-358AA5796AAA)]
        [version(0x00000001)]
        interface IBitmapProviderImageSource : IInspectable
        {
            HRESULT Invalidate();
        }

        [exclusiveto(Lumia.Imaging.BitmapProviderImageSource)]
        [uuid(31C1577D-C69A-3D82-A414-DE554A31B276)]
        [version(0x00000001)]
        interface IBitmapProviderImageSourceFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IReadableBitmapProvider* readableBitmapProvider, [out] [retval] Lumia.Imaging.BitmapProviderImageSource** __returnValue);
        }

        [uuid(38633070-6FC8-37FC-8F57-06C1C7F188B8)]
        [version(0x00000001)]
        interface IReadableBitmapProvider : IInspectable
        {
            HRESULT GetAsync([out] [retval] Windows.Foundation.IAsyncOperation<Lumia.Imaging.IReadableBitmap*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.BitmapRenderer)]
        [uuid(E8028D24-38D1-3CB8-B55B-2560952847CB)]
        [version(0x00000001)]
        interface IBitmapRenderer : IInspectable
        {
            [propget] HRESULT OutputOption([out] [retval] Lumia.Imaging.OutputOption* __returnValue);
            [propput] HRESULT OutputOption([in] Lumia.Imaging.OutputOption outputOption);
            [propget] HRESULT Bitmap([out] [retval] Lumia.Imaging.Bitmap** __returnValue);
            [propput] HRESULT Bitmap([in] Lumia.Imaging.Bitmap* bitmap);
            [propget] HRESULT Size([out] [retval] Windows.Foundation.Size* __returnValue);
            [propput] HRESULT Size([in] Windows.Foundation.Size size);
            [propget] HRESULT ColorMode([out] [retval] Lumia.Imaging.ColorMode* __returnValue);
            [propput] HRESULT ColorMode([in] Lumia.Imaging.ColorMode colorMode);
            HRESULT RenderAsync([out] [retval] Windows.Foundation.IAsyncOperation<Lumia.Imaging.Bitmap*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.BitmapRenderer)]
        [uuid(E422C18A-1B42-3630-91A0-972F51A833CF)]
        [version(0x00000001)]
        interface IBitmapRendererFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT CreateWithSource([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.BitmapRenderer** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithSourceAndColorMode([in] Lumia.Imaging.IImageProvider* imageSource, [in] Lumia.Imaging.ColorMode colorMode, [out] [retval] Lumia.Imaging.BitmapRenderer** __returnValue);
            [default_overload] [overload("CreateInstance")] HRESULT CreateWithSourceAndBitmap([in] Lumia.Imaging.IImageProvider* imageSource, [in] Lumia.Imaging.Bitmap* bitmap, [out] [retval] Lumia.Imaging.BitmapRenderer** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithSourceAndBitmapAndOutputOption([in] Lumia.Imaging.IImageProvider* imageSource, [in] Lumia.Imaging.Bitmap* bitmap, [in] Lumia.Imaging.OutputOption outputOption, [out] [retval] Lumia.Imaging.BitmapRenderer** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.DiagnosticsReport)]
        [uuid(2B717B72-82BF-3603-8C79-1E619B7258D2)]
        [version(0x00000001)]
        interface IDiagnosticsReport : IInspectable
        {
            [propget] HRESULT Properties([out] [retval] Windows.Foundation.Collections.IPropertySet** __returnValue);
            [propget] HRESULT Text([out] [retval] HSTRING* __returnValue);
        }

        [exclusiveto(Lumia.Imaging.DiagnosticsReport)]
        [uuid(2B99BECD-FFA7-396F-BF90-54A1B4C71F3B)]
        [version(0x00000001)]
        interface IDiagnosticsReportStatics : IInspectable
        {
            HRESULT CreateAsync([out] [retval] Windows.Foundation.IAsyncOperation<Lumia.Imaging.DiagnosticsReport*>** __returnValue);
            HRESULT BeginProbe([in] Lumia.Imaging.IImageProvider* imageProvider);
            HRESULT EndProbeAsync([in] Lumia.Imaging.IImageProvider* imageProvider, [out] [retval] Windows.Foundation.IAsyncOperation<Lumia.Imaging.DiagnosticsReport*>** __returnValue);
        }

        [uuid(EA16A818-CE32-35E0-9A29-DF22B90B0EEB)]
        [version(0x00000001)]
        interface IActiveFrame : IInspectable
        {
            [propget] HRESULT FrameIndex([out] [retval] UINT32* __returnValue);
            [propput] HRESULT FrameIndex([in] UINT32 size);
        }

        [exclusiveto(Lumia.Imaging.BufferImageSource)]
        [uuid(32625C35-267B-3D29-AF65-6C62BCACB19B)]
        [version(0x00000001)]
        interface IBufferImageSource : IInspectable
        {
            [propget] HRESULT Buffer([out] [retval] Windows.Storage.Streams.IBuffer** __returnValue);
            [propput] HRESULT Buffer([in] Windows.Storage.Streams.IBuffer* buffer);
            [propget] HRESULT ImageFormat([out] [retval] Lumia.Imaging.ImageFormat* __returnValue);
            [propput] HRESULT ImageFormat([in] Lumia.Imaging.ImageFormat imageFormat);
            HRESULT Invalidate();
        }

        [exclusiveto(Lumia.Imaging.BufferImageSource)]
        [uuid(195F0E30-5BAB-30DE-98D1-CDE2474D9DB7)]
        [version(0x00000001)]
        interface IBufferImageSourceFactory : IInspectable
        {
            [default_overload] [overload("CreateInstance")] HRESULT Create([in] Windows.Storage.Streams.IBuffer* buffer, [out] [retval] Lumia.Imaging.BufferImageSource** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithImageFormat([in] Windows.Storage.Streams.IBuffer* buffer, [in] Lumia.Imaging.ImageFormat imageFormat, [out] [retval] Lumia.Imaging.BufferImageSource** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.BufferProviderImageSource)]
        [uuid(36B9DD7D-7BAB-32DC-A56D-2C4BE04BB402)]
        [version(0x00000001)]
        interface IBufferProviderImageSource : IInspectable
        {
            [propget] HRESULT ImageFormat([out] [retval] Lumia.Imaging.ImageFormat* __returnValue);
            [propput] HRESULT ImageFormat([in] Lumia.Imaging.ImageFormat imageFormat);
            HRESULT Invalidate();
        }

        [exclusiveto(Lumia.Imaging.BufferProviderImageSource)]
        [uuid(AD17EF14-92FF-39F9-94A7-A5D5774109DA)]
        [version(0x00000001)]
        interface IBufferProviderImageSourceFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IBufferProvider* bufferProvider, [out] [retval] Lumia.Imaging.BufferProviderImageSource** __returnValue);
        }

        [uuid(BED10A2F-9816-3B86-B15C-D3CB344187A6)]
        [version(0x00000001)]
        interface IBufferProvider : IInspectable
        {
            HRESULT GetAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.CachingEffect)]
        [uuid(783F04A4-2D49-31CE-BA8D-5513DD3E028B)]
        [version(0x00000001)]
        interface ICachingEffect : IInspectable
        {
            HRESULT Invalidate();
            [propget] HRESULT OutputOption([out] [retval] Lumia.Imaging.OutputOption* __returnValue);
            [propput] HRESULT OutputOption([in] Lumia.Imaging.OutputOption outputOption);
            [propget] HRESULT ColorMode([out] [retval] Lumia.Imaging.ColorMode* __returnValue);
            [propput] HRESULT ColorMode([in] Lumia.Imaging.ColorMode colorMode);
        }

        [exclusiveto(Lumia.Imaging.CachingEffect)]
        [uuid(91EBE4EB-E066-31C3-B60D-C769769CF041)]
        [version(0x00000001)]
        interface ICachingEffectFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.CachingEffect** __returnValue);
        }

        [uuid(48E8DAE0-A08A-3CE3-8A73-B3D49EE447A6)]
        [version(0x00000001)]
        interface IGradient : IInspectable
        {
            [propget] HRESULT Stops([out] UINT32* ____returnValueSize, [out] [retval] [size_is(, *____returnValueSize)] Lumia.Imaging.GradientStop** __returnValue);
            [propput] HRESULT Stops([in] UINT32 __stopsSize, [in] [size_is(__stopsSize)] Lumia.Imaging.GradientStop* stops);
        }

        [exclusiveto(Lumia.Imaging.ColorImageSource)]
        [uuid(980CECE6-D3AF-3FB0-BAB6-5B067CA46668)]
        [version(0x00000001)]
        interface IColorImageSource : IInspectable
        {
            [propget] HRESULT Color([out] [retval] Windows.UI.Color* __returnValue);
            [propput] HRESULT Color([in] Windows.UI.Color color);
        }

        [exclusiveto(Lumia.Imaging.ColorImageSource)]
        [uuid(0E8927C7-5D2E-384B-9DE9-839A76F40322)]
        [version(0x00000001)]
        interface IColorImageSourceFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Size size, [in] Windows.UI.Color color, [out] [retval] Lumia.Imaging.ColorImageSource** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.Version)]
        [uuid(9CBDCD12-05F2-3784-9FAA-8E30CBCE82D7)]
        [version(0x00000001)]
        interface IVersion : IInspectable
        {
            [propget] HRESULT Major([out] [retval] INT32* __returnValue);
            [propget] HRESULT Minor([out] [retval] INT32* __returnValue);
            [propget] HRESULT Build([out] [retval] INT32* __returnValue);
            [propget] HRESULT Revision([out] [retval] INT32* __returnValue);
            HRESULT ToShortVersionString([out] [retval] HSTRING* __returnValue);
            HRESULT ToLongVersionString([out] [retval] HSTRING* __returnValue);
        }

        [exclusiveto(Lumia.Imaging.Version)]
        [uuid(A44E0055-EE40-33ED-B23A-9EC91E2F3B30)]
        [version(0x00000001)]
        interface IVersionFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] INT32 major, [in] INT32 minor, [in] INT32 build, [in] INT32 revision, [out] [retval] Lumia.Imaging.Version** __returnValue);
            [overload("CreateInstance")] HRESULT CreateFromString([in] HSTRING version, [out] [retval] Lumia.Imaging.Version** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.SdkInfo)]
        [uuid(03E5F6CD-85BE-37A5-973E-A3BF8FCA5BA1)]
        [version(0x00000001)]
        interface ISdkInfo : IInspectable
        {
        }

        [exclusiveto(Lumia.Imaging.SdkInfo)]
        [uuid(029BA710-1A50-30A0-B749-6D2C07A86193)]
        [version(0x00000001)]
        interface ISdkInfoStatics : IInspectable
        {
            [propget] HRESULT Version([out] [retval] Lumia.Imaging.Version** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.EllipseRadius)]
        [uuid(CB184472-F106-3C94-A956-7998D305C7BD)]
        [version(0x00000001)]
        interface IEllipseRadius : IInspectable
        {
            [propget] HRESULT X([out] [retval] DOUBLE* __returnValue);
            [propget] HRESULT Y([out] [retval] DOUBLE* __returnValue);
        }

        [exclusiveto(Lumia.Imaging.EllipseRadius)]
        [uuid(027A495E-E2CB-35B8-9625-146FBB291495)]
        [version(0x00000001)]
        interface IEllipseRadiusFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] DOUBLE x, [in] DOUBLE y, [out] [retval] Lumia.Imaging.EllipseRadius** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.FilterEffect)]
        [uuid(D95F9EF3-CABD-32BC-BB95-9FDFE56C5C38)]
        [version(0x00000001)]
        interface IFilterEffectFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.FilterEffect** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.GifRenderer)]
        [uuid(84D6EFC8-ACC5-3A53-89E2-0564F0A79821)]
        [version(0x00000001)]
        interface IGifRenderer : IInspectable
        {
            [propget] HRESULT Sources([out] [retval] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>** __returnValue);
            [propput] HRESULT Sources([in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>* imageSources);
            [propget] HRESULT Size([out] [retval] Windows.Foundation.Size* __returnValue);
            [propput] HRESULT Size([in] Windows.Foundation.Size size);
            [propget] HRESULT Duration([out] [retval] INT32* __returnValue);
            [propput] HRESULT Duration([in] INT32 duration);
            [propget] HRESULT NumberOfAnimationLoops([out] [retval] INT32* __returnValue);
            [propput] HRESULT NumberOfAnimationLoops([in] INT32 numberOfAnimationLoops);
            [propget] HRESULT ApplyDithering([out] [retval] boolean* __returnValue);
            [propput] HRESULT ApplyDithering([in] boolean value);
            [propget] HRESULT UseGlobalPalette([out] [retval] boolean* __returnValue);
            [propput] HRESULT UseGlobalPalette([in] boolean value);
            HRESULT RenderAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.GifRenderer)]
        [uuid(5FD7A98F-AB2A-3F7A-AAA8-621F8A9C5416)]
        [version(0x00000001)]
        interface IGifRendererFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.GifRenderer** __returnValue);
            [default_overload] [overload("CreateInstance")] HRESULT CreateFromMultipleSources([in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>* imageSources, [out] [retval] Lumia.Imaging.GifRenderer** __returnValue);
            [overload("CreateInstance")] HRESULT CreateFromMultipleSourcesWithSettings([in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>* imageSources, [in] INT32 duration, [in] INT32 numberOfAnimationLoops, [out] [retval] Lumia.Imaging.GifRenderer** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.LinearGradient)]
        [uuid(F9DC3577-0082-3E84-B81A-50FB3E20A0F3)]
        [version(0x00000001)]
        interface ILinearGradient : IInspectable
        {
            [propget] HRESULT StartPoint([out] [retval] Windows.Foundation.Point* __returnValue);
            [propput] HRESULT StartPoint([in] Windows.Foundation.Point startPoint);
            [propget] HRESULT EndPoint([out] [retval] Windows.Foundation.Point* __returnValue);
            [propput] HRESULT EndPoint([in] Windows.Foundation.Point endPoint);
        }

        [exclusiveto(Lumia.Imaging.LinearGradient)]
        [uuid(96A42F3D-5C32-34AD-8740-B30E3715E089)]
        [version(0x00000001)]
        interface ILinearGradientFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Point startPoint, [in] Windows.Foundation.Point endPoint, [out] [retval] Lumia.Imaging.LinearGradient** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithGradientStops([in] Windows.Foundation.Point startPoint, [in] Windows.Foundation.Point endPoint, [in] UINT32 __stopsSize, [in] [size_is(__stopsSize)] Lumia.Imaging.GradientStop* stops, [out] [retval] Lumia.Imaging.LinearGradient** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.RadialGradient)]
        [uuid(49FF64AF-B803-3A32-BE1F-362C210FDFFF)]
        [version(0x00000001)]
        interface IRadialGradient : IInspectable
        {
            [propget] HRESULT CenterPoint([out] [retval] Windows.Foundation.Point* __returnValue);
            [propput] HRESULT CenterPoint([in] Windows.Foundation.Point centerPoint);
            [propget] HRESULT EllipseRadius([out] [retval] Lumia.Imaging.EllipseRadius** __returnValue);
            [propput] HRESULT EllipseRadius([in] Lumia.Imaging.EllipseRadius* size);
        }

        [exclusiveto(Lumia.Imaging.RadialGradient)]
        [uuid(B62B7025-C07E-329F-BB2E-1B52099657E0)]
        [version(0x00000001)]
        interface IRadialGradientFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Point centerPoint, [in] Lumia.Imaging.EllipseRadius* radius, [out] [retval] Lumia.Imaging.RadialGradient** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithGradientStops([in] Windows.Foundation.Point centerPoint, [in] Lumia.Imaging.EllipseRadius* radius, [in] UINT32 __stopsSize, [in] [size_is(__stopsSize)] Lumia.Imaging.GradientStop* stops, [out] [retval] Lumia.Imaging.RadialGradient** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.GradientImageSource)]
        [uuid(2DFAAD41-6E7B-3CAB-AC5F-7759DA750921)]
        [version(0x00000001)]
        interface IGradientImageSource : IInspectable
        {
            [propget] HRESULT Gradient([out] [retval] Lumia.Imaging.IGradient** __returnValue);
            [propput] HRESULT Gradient([in] Lumia.Imaging.IGradient* gradient);
        }

        [exclusiveto(Lumia.Imaging.GradientImageSource)]
        [uuid(2F650984-E2BD-3B17-B8DB-014BBB282DEC)]
        [version(0x00000001)]
        interface IGradientImageSourceFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Size size, [in] Lumia.Imaging.IGradient* gradient, [out] [retval] Lumia.Imaging.GradientImageSource** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.ImageProviderInfo)]
        [uuid(5B972967-A050-3539-8F65-C6E3C0456DDD)]
        [version(0x00000001)]
        interface IImageProviderInfo : IInspectable
        {
            [propget] HRESULT ImageSize([out] [retval] Windows.Foundation.Size* __returnValue);
            [deprecated("ImageSize is readonly", remove, 0x6030000)] [propput] HRESULT ImageSize([in] Windows.Foundation.Size imageSize);
            [propget] HRESULT FrameCount([out] [retval] UINT32* __returnValue);
        }

        [exclusiveto(Lumia.Imaging.JpegRenderer)]
        [uuid(3698DB81-3B19-30FA-949E-012B726F4542)]
        [version(0x00000001)]
        interface IJpegRenderer : IInspectable
        {
            [propget] HRESULT Size([out] [retval] Windows.Foundation.Size* __returnValue);
            [propput] HRESULT Size([in] Windows.Foundation.Size size);
            [propget] HRESULT OutputOption([out] [retval] Lumia.Imaging.OutputOption* __returnValue);
            [propput] HRESULT OutputOption([in] Lumia.Imaging.OutputOption outputOption);
            [propget] HRESULT Quality([out] [retval] DOUBLE* __returnValue);
            [propput] HRESULT Quality([in] DOUBLE quality);
            [propget] HRESULT OutputColorMode([out] [retval] Lumia.Imaging.JpegOutputColorMode* __returnValue);
            [propput] HRESULT OutputColorMode([in] Lumia.Imaging.JpegOutputColorMode colorMode);
            [propget] HRESULT RemoveExif([out] [retval] boolean* __returnValue);
            [propput] HRESULT RemoveExif([in] boolean removeExif);
            HRESULT RenderAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.JpegRenderer)]
        [uuid(E953A123-68C2-3278-828A-ADB4921A0704)]
        [version(0x00000001)]
        interface IJpegRendererFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* source, [out] [retval] Lumia.Imaging.JpegRenderer** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.JpegTools)]
        [uuid(E0966F98-DF60-357D-8F3F-4824696B85D1)]
        [version(0x00000001)]
        interface IJpegTools : IInspectable
        {
        }

        [exclusiveto(Lumia.Imaging.JpegTools)]
        [uuid(7A4457C6-05C8-31A9-B406-4CF9AF49F8EF)]
        [version(0x00000001)]
        interface IJpegToolsStatics : IInspectable
        {
            HRESULT FlipAndRotateAsync([in] Windows.Storage.Streams.IBuffer* jpegSource, [in] Lumia.Imaging.Transforms.FlipMode flipMode, [in] Lumia.Imaging.Rotation rotation, [in] Lumia.Imaging.JpegOperation jpegOperation, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** __returnValue);
            HRESULT BlendAsync([in] Windows.Storage.Streams.IBuffer* jpegSource, [in] Lumia.Imaging.IReadableBitmap* bitmapSource, [in] Windows.Foundation.Point blendPosition, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** __returnValue);
            HRESULT SqueezeAsync([in] Windows.Storage.Streams.IBuffer* jpegSource, [in] UINT32 toSize, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** __returnValue);
            HRESULT AutoResizeAsync([in] Windows.Storage.Streams.IBuffer* jpegSource, [in] Lumia.Imaging.AutoResizeConfiguration* autoConfiguration, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Storage.Streams.IBuffer*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.RandomAccessStreamImageSource)]
        [uuid(69EF1FDA-C7AF-3E00-A9E7-0EBB5BD4CD94)]
        [version(0x00000001)]
        interface IRandomAccessStreamImageSource : IInspectable
        {
            [propget] HRESULT Stream([out] [retval] Windows.Storage.Streams.IRandomAccessStream** __returnValue);
            [propput] HRESULT Stream([in] Windows.Storage.Streams.IRandomAccessStream* stream);
            [propget] HRESULT ImageFormat([out] [retval] Lumia.Imaging.ImageFormat* __returnValue);
            [propput] HRESULT ImageFormat([in] Lumia.Imaging.ImageFormat imageFormat);
        }

        [exclusiveto(Lumia.Imaging.RandomAccessStreamImageSource)]
        [uuid(500D56B0-7EC3-31F4-8CC0-104474927B4D)]
        [version(0x00000001)]
        interface IRandomAccessStreamImageSourceFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Windows.Storage.Streams.IRandomAccessStream* stream, [out] [retval] Lumia.Imaging.RandomAccessStreamImageSource** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithImageFormat([in] Windows.Storage.Streams.IRandomAccessStream* stream, [in] Lumia.Imaging.ImageFormat imageFormat, [out] [retval] Lumia.Imaging.RandomAccessStreamImageSource** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.StorageFileImageSource)]
        [uuid(6BC46E72-6AD4-3E33-9ED7-502F8F1CA906)]
        [version(0x00000001)]
        interface IStorageFileImageSource : IInspectable
        {
            [propget] HRESULT StorageFile([out] [retval] Windows.Storage.IStorageFile** __returnValue);
            [propput] HRESULT StorageFile([in] Windows.Storage.IStorageFile* storageFile);
            [propget] HRESULT ImageFormat([out] [retval] Lumia.Imaging.ImageFormat* __returnValue);
            [propput] HRESULT ImageFormat([in] Lumia.Imaging.ImageFormat imageFormat);
        }

        [exclusiveto(Lumia.Imaging.StorageFileImageSource)]
        [uuid(3F4EA5C5-DE6F-3B91-92D7-1A315DAD2044)]
        [version(0x00000001)]
        interface IStorageFileImageSourceFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Windows.Storage.IStorageFile* storageFile, [out] [retval] Lumia.Imaging.StorageFileImageSource** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithImageFormat([in] Windows.Storage.IStorageFile* storageFile, [in] Lumia.Imaging.ImageFormat imageFormat, [out] [retval] Lumia.Imaging.StorageFileImageSource** __returnValue);
        }

        [uuid(2285217E-DECB-3578-BC82-54D38AA06F1A)]
        [version(0x00000001)]
        interface IMediaCapture : IInspectable
        {
            [overload("InitializeAsync")] HRESULT InitializeAsync1([in] Windows.Media.Capture.MediaCaptureInitializationSettings* mediaCaptureInitializationSettings, [out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            [overload("InitializeAsync")] HRESULT InitializeAsync2([out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            HRESULT StartPreviewAsync([out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            HRESULT StartPreviewToCustomSinkAsync([in] Windows.Media.MediaProperties.MediaEncodingProfile* encodingProfile, [in] Windows.Media.IMediaExtension* customMediaSink, [out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            HRESULT StopPreviewAsync([out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            HRESULT SupportsVideoPreview([out] [retval] boolean* __returnValue);
            [propget] HRESULT VideoDeviceController([out] [retval] Windows.Media.Devices.IMediaDeviceController** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.CameraPreviewImageSource)]
        [uuid(EE7157B4-1C98-34BD-8B96-6CE7CA470B28)]
        [version(0x00000001)]
        interface ICameraPreviewImageSource : IInspectable
        {
            [eventadd] HRESULT PreviewFrameAvailable([in] Lumia.Imaging.PreviewFrameAvailableDelegate* __param0, [out] [retval] EventRegistrationToken* __returnValue);
            [eventremove] HRESULT PreviewFrameAvailable([in] EventRegistrationToken __param0);
            HRESULT InitializeAsync([in] HSTRING preferedDeviceId, [out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            [overload("StartPreviewAsync")] HRESULT StartPreviewAsync2([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.MediaProperties.VideoEncodingProperties*>** __returnValue);
            [overload("StartPreviewAsync")] HRESULT StartPreviewAsync1([in] Windows.Media.MediaProperties.VideoEncodingProperties* videoEncodingProperties, [out] [retval] Windows.Foundation.IAsyncOperation<Windows.Media.MediaProperties.VideoEncodingProperties*>** __returnValue);
            HRESULT StopPreviewAsync([out] [retval] Windows.Foundation.IAsyncAction** __returnValue);
            [propget] HRESULT IsPreviewing([out] [retval] boolean* __returnValue);
            [propget] HRESULT VideoDeviceController([out] [retval] Windows.Media.Devices.IMediaDeviceController** __returnValue);
            [propget] HRESULT AvailablePreviewVideoEncodingProperties([out] [retval] Windows.Foundation.Collections.IIterable<Windows.Media.MediaProperties.VideoEncodingProperties*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.CameraPreviewImageSource)]
        [uuid(EFD3D1FC-BDF9-3709-A634-B0E1FE4C87FD)]
        [version(0x00000001)]
        interface ICameraPreviewImageSourceProtectedNonVirtuals : IInspectable
        {
            [propget] HRESULT MediaCaptureDevice([out] [retval] Lumia.Imaging.IMediaCapture** __returnValue);
            [propput] HRESULT MediaCaptureDevice([in] Lumia.Imaging.IMediaCapture* value);
            HRESULT CreateTestSample([in] Windows.Storage.Streams.IBuffer* buffer);
        }

        [exclusiveto(Lumia.Imaging.WriteableBitmapRenderer)]
        [uuid(DB5E6CC0-0CB6-3882-AE92-07C77FE06961)]
        [version(0x00000001)]
        interface IWriteableBitmapRenderer : IInspectable
        {
            [propget] HRESULT OutputOption([out] [retval] Lumia.Imaging.OutputOption* __returnValue);
            [propput] HRESULT OutputOption([in] Lumia.Imaging.OutputOption outputOption);
            [propget] HRESULT WriteableBitmap([out] [retval] Windows.UI.Xaml.Media.Imaging.WriteableBitmap** __returnValue);
            [propput] HRESULT WriteableBitmap([in] Windows.UI.Xaml.Media.Imaging.WriteableBitmap* writeableBitmap);
            HRESULT RenderAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.UI.Xaml.Media.Imaging.WriteableBitmap*>** __returnValue);
        }

        [exclusiveto(Lumia.Imaging.WriteableBitmapRenderer)]
        [uuid(76F2C710-AF45-3754-96BE-35131E083785)]
        [version(0x00000001)]
        interface IWriteableBitmapRendererFactory : IInspectable
        {
            [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.IImageProvider* imageSource, [out] [retval] Lumia.Imaging.WriteableBitmapRenderer** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithWriteableBitmap([in] Lumia.Imaging.IImageProvider* imageSource, [in] Windows.UI.Xaml.Media.Imaging.WriteableBitmap* writeableBitmap, [out] [retval] Lumia.Imaging.WriteableBitmapRenderer** __returnValue);
            [overload("CreateInstance")] HRESULT CreateWithWriteableBitmapAndOutputOption([in] Lumia.Imaging.IImageProvider* imageSource, [in] Windows.UI.Xaml.Media.Imaging.WriteableBitmap* writeableBitmap, [in] Lumia.Imaging.OutputOption outputOption, [out] [retval] Lumia.Imaging.WriteableBitmapRenderer** __returnValue);
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass PixelBufferInfo
        {
            [default] interface Lumia.Imaging.IPixelBufferInfo;
        }

        [activatable(Lumia.Imaging.IBitmapFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass Bitmap
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IReadableBitmap;
            [default] interface Lumia.Imaging.IBitmap;
        }

        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass RenderRequest
        {
            interface Windows.Foundation.IClosable;
            [default] interface Lumia.Imaging.IRenderRequest;
        }

        [activatable(Lumia.Imaging.IAnimationFrameFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass AnimationFrame
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IImageConsumer;
            [default] interface Lumia.Imaging.IAnimationFrame;
        }

        [activatable(Lumia.Imaging.IAutoResizeConfigurationFactory, 0x00000001)]
        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass AutoResizeConfiguration
        {
            interface Windows.Foundation.IStringable;
            [default] interface Lumia.Imaging.IAutoResizeConfiguration;
        }

        [activatable(Lumia.Imaging.IColorModeDescriptorFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass ColorModeDescriptor
        {
            [default] interface Lumia.Imaging.IColorModeDescriptor;
        }

        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass ColorPlaneDescriptor
        {
            interface Windows.Foundation.IClosable;
            [default] interface Lumia.Imaging.IColorPlaneDescriptor;
        }

        [activatable(Lumia.Imaging.IBitmapImageSourceFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass BitmapImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IImageSize;
            [default] interface Lumia.Imaging.IBitmapImageSource;
        }

        [activatable(Lumia.Imaging.IBitmapProviderImageSourceFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass BitmapProviderImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            [default] interface Lumia.Imaging.IBitmapProviderImageSource;
        }

        [activatable(Lumia.Imaging.IBitmapRendererFactory, 0x00000001)]
        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass BitmapRenderer
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageConsumer;
            [default] interface Lumia.Imaging.IBitmapRenderer;
        }

        [marshaling_behavior(agile)]
        [static(Lumia.Imaging.IDiagnosticsReportStatics, 0x00000001)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass DiagnosticsReport
        {
            interface Windows.Foundation.IClosable;
            [default] interface Lumia.Imaging.IDiagnosticsReport;
        }

        [activatable(Lumia.Imaging.IBufferImageSourceFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass BufferImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IActiveFrame;
            [default] interface Lumia.Imaging.IBufferImageSource;
        }

        [activatable(Lumia.Imaging.IBufferProviderImageSourceFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass BufferProviderImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IActiveFrame;
            [default] interface Lumia.Imaging.IBufferProviderImageSource;
        }

        [activatable(Lumia.Imaging.ICachingEffectFactory, 0x00000001)]
        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass CachingEffect
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageConsumer;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IImageSize;
            [default] interface Lumia.Imaging.ICachingEffect;
        }

        [activatable(Lumia.Imaging.IColorImageSourceFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass ColorImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IImageSize;
            [default] interface Lumia.Imaging.IColorImageSource;
        }

        [activatable(0x00000001)]
        [activatable(Lumia.Imaging.IVersionFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass Version
        {
            [default] interface Lumia.Imaging.IVersion;
        }

        [marshaling_behavior(agile)]
        [static(Lumia.Imaging.ISdkInfoStatics, 0x00000001)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass SdkInfo
        {
            [default] interface Lumia.Imaging.ISdkInfo;
        }

        [activatable(Lumia.Imaging.IEllipseRadiusFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass EllipseRadius
        {
            [default] interface Lumia.Imaging.IEllipseRadius;
        }

        [activatable(Lumia.Imaging.IFilterEffectFactory, 0x00000001)]
        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass FilterEffect
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageConsumer;
            interface Lumia.Imaging.IImageProvider;
            [default] interface Lumia.Imaging.IFilterEffect;
        }

        [activatable(0x00000001)]
        [activatable(Lumia.Imaging.IGifRendererFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass GifRenderer
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageConsumer;
            [default] interface Lumia.Imaging.IGifRenderer;
        }

        [activatable(Lumia.Imaging.ILinearGradientFactory, 0x00000001)]
        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass LinearGradient
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IGradient;
            [default] interface Lumia.Imaging.ILinearGradient;
        }

        [activatable(Lumia.Imaging.IRadialGradientFactory, 0x00000001)]
        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass RadialGradient
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IGradient;
            [default] interface Lumia.Imaging.IRadialGradient;
        }

        [activatable(Lumia.Imaging.IGradientImageSourceFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass GradientImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IImageSize;
            [default] interface Lumia.Imaging.IGradientImageSource;
        }

        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass ImageProviderInfo
        {
            [default] interface Lumia.Imaging.IImageProviderInfo;
        }

        [activatable(Lumia.Imaging.IJpegRendererFactory, 0x00000001)]
        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass JpegRenderer
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageConsumer;
            [default] interface Lumia.Imaging.IJpegRenderer;
        }

        [marshaling_behavior(agile)]
        [static(Lumia.Imaging.IJpegToolsStatics, 0x00000001)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass JpegTools
        {
            [default] interface Lumia.Imaging.IJpegTools;
        }

        [activatable(Lumia.Imaging.IRandomAccessStreamImageSourceFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass RandomAccessStreamImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IActiveFrame;
            [default] interface Lumia.Imaging.IRandomAccessStreamImageSource;
        }

        [activatable(Lumia.Imaging.IStorageFileImageSourceFactory, 0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass StorageFileImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IActiveFrame;
            [default] interface Lumia.Imaging.IStorageFileImageSource;
        }

        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass CameraPreviewImageSource
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageProvider;
            interface Lumia.Imaging.IImageSize;
            [default] interface Lumia.Imaging.ICameraPreviewImageSource;
            interface Lumia.Imaging.ICameraPreviewImageSourceProtectedNonVirtuals;
        }

        [activatable(Lumia.Imaging.IWriteableBitmapRendererFactory, 0x00000001)]
        [activatable(0x00000001)]
        [marshaling_behavior(agile)]
        [threading(both)]
        [version(0x00000001)]
        runtimeclass WriteableBitmapRenderer
        {
            interface Windows.Foundation.IClosable;
            interface Lumia.Imaging.IImageConsumer;
            [default] interface Lumia.Imaging.IWriteableBitmapRenderer;
        }
    }
}
