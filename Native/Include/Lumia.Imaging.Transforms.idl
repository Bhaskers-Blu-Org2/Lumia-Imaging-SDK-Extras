/*
Copyright (c) 2014 Microsoft Mobile
 
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

// ff36e5204094ccf45e4f6717c336febaea749ea9 Thu, 18 Dec 2014 16:15:12 +0100

//
// File generated by WinMDIDL version 8.00.0011
//

import "inspectable.idl";
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Lumia.Imaging.idl";
// Additional imports to ensure that all required headers are included
cpp_quote("#if defined(__cplusplus)")
cpp_quote("}")
cpp_quote("#endif // defined(__cplusplus)")
cpp_quote("#include <Windows.Foundation.h>")
cpp_quote("#if !defined(__lumia2Eimaging_h__)")
cpp_quote("#include \"Lumia.Imaging.h\"")
cpp_quote("#endif // !defined(__lumia2Eimaging_h__)")
cpp_quote("#if defined(__cplusplus)")
cpp_quote("extern \"C\" {")
cpp_quote("#endif // defined(__cplusplus)")

// Forward Declare
namespace Lumia
{
    namespace Imaging
    {
        interface IFilter;

        interface IImageProvider;
    }
}
namespace Windows
{
    namespace Foundation
    {
        interface IClosable;

        typedef struct Point Point;

        typedef struct Rect Rect;
    }
}
namespace Lumia
{
    namespace Imaging
    {
        namespace Transforms
        {
            typedef enum AlignmentQuality AlignmentQuality;

            typedef enum FlipMode FlipMode;

            interface ICropFilter;

            interface ICropFilterFactory;

            interface IScaleFilter;

            interface IScaleFilterFactory;

            interface IFlipFilter;

            interface IFlipFilterFactory;

            interface IImageAligner;

            interface IImageAlignerFactory;

            interface IReframingFilter;

            interface IReframingFilterFactory;

            interface IRotationFilter;

            interface IRotationFilterFactory;

            runtimeclass CropFilter;

            runtimeclass ScaleFilter;

            runtimeclass FlipFilter;

            runtimeclass ImageAligner;

            runtimeclass ReframingFilter;

            runtimeclass RotationFilter;
        }
    }
}

// Generic instantiations

// Type definition
namespace Lumia
{
    namespace Imaging
    {
        namespace Transforms
        {
            [version(0x00000001)]
            enum AlignmentQuality
            {
                High   = 0,
                Medium = 1,
                Low    = 2
            };

            [version(0x00000001)]
            enum FlipMode
            {
                None       = 0,
                Vertical   = 1,
                Horizontal = 2,
                Both       = 3
            };

            [exclusiveto(Lumia.Imaging.Transforms.CropFilter)]
            [uuid(5B9EEE26-2011-33EA-87B9-33B4B232576A)]
            [version(0x00000001)]
            interface ICropFilter : IInspectable
            {
                [propget] HRESULT CropArea([out] [retval] Windows.Foundation.Rect* __returnValue);
                [propput] HRESULT CropArea([in] Windows.Foundation.Rect value);
            }

            [exclusiveto(Lumia.Imaging.Transforms.CropFilter)]
            [uuid(BF2A85FB-EBD4-3E8B-A2AA-1854D56BA67D)]
            [version(0x00000001)]
            interface ICropFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT CreateWithArea([in] Windows.Foundation.Rect cropArea, [out] [retval] Lumia.Imaging.Transforms.CropFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Transforms.ScaleFilter)]
            [uuid(7B18FF2E-8B5F-39D2-A366-5DCF3039F93E)]
            [version(0x00000001)]
            interface IScaleFilter : IInspectable
            {
                [propget] HRESULT Scale([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Scale([in] DOUBLE scale);
            }

            [exclusiveto(Lumia.Imaging.Transforms.ScaleFilter)]
            [uuid(C4C8C1CF-B9C3-3795-8440-02D6D31FA8DF)]
            [version(0x00000001)]
            interface IScaleFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] DOUBLE scale, [out] [retval] Lumia.Imaging.Transforms.ScaleFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Transforms.FlipFilter)]
            [uuid(E94024D9-C4B3-3352-B4C5-7EFB271AC97C)]
            [version(0x00000001)]
            interface IFlipFilter : IInspectable
            {
                [propget] HRESULT FlipMode([out] [retval] Lumia.Imaging.Transforms.FlipMode* __returnValue);
                [propput] HRESULT FlipMode([in] Lumia.Imaging.Transforms.FlipMode value);
            }

            [exclusiveto(Lumia.Imaging.Transforms.FlipFilter)]
            [uuid(2939920D-F595-3F3A-905C-DD27BEDD74EF)]
            [version(0x00000001)]
            interface IFlipFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Lumia.Imaging.Transforms.FlipMode flipMode, [out] [retval] Lumia.Imaging.Transforms.FlipFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Transforms.ImageAligner)]
            [uuid(CB02919B-1622-3F52-9CE6-4787F323F96A)]
            [version(0x00000001)]
            interface IImageAligner : IInspectable
            {
                [propget] HRESULT Sources([out] [retval] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>** __returnValue);
                [propput] HRESULT Sources([in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>* value);
                [propget] HRESULT ReferenceSource([out] [retval] Lumia.Imaging.IImageProvider** __returnValue);
                [propput] HRESULT ReferenceSource([in] Lumia.Imaging.IImageProvider* value);
                [propget] HRESULT BitmapCacheSize([out] [retval] INT32* __returnValue);
                [propput] HRESULT BitmapCacheSize([in] INT32 value);
                HRESULT AlignAsync([out] [retval] Windows.Foundation.IAsyncOperation<Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>*>** __returnValue);
                [propget] HRESULT Quality([out] [retval] Lumia.Imaging.Transforms.AlignmentQuality* __returnValue);
                [propput] HRESULT Quality([in] Lumia.Imaging.Transforms.AlignmentQuality quality);
                [propget] HRESULT UseColorCorrection([out] [retval] boolean* __returnValue);
                [propput] HRESULT UseColorCorrection([in] boolean useColorCorrection);
            }

            [exclusiveto(Lumia.Imaging.Transforms.ImageAligner)]
            [uuid(A8E55509-3D2E-3336-9D98-633022A7CBBB)]
            [version(0x00000001)]
            interface IImageAlignerFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>* sources, [out] [retval] Lumia.Imaging.Transforms.ImageAligner** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithReferenceImage([in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>* sources, [in] Lumia.Imaging.IImageProvider* referenceSource, [out] [retval] Lumia.Imaging.Transforms.ImageAligner** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithReferenceImageAndCacheSize([in] Windows.Foundation.Collections.IVectorView<Lumia.Imaging.IImageProvider*>* sources, [in] Lumia.Imaging.IImageProvider* referenceSource, [in] INT32 bitmapCacheSize, [out] [retval] Lumia.Imaging.Transforms.ImageAligner** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Transforms.ReframingFilter)]
            [uuid(E44D8D90-B78F-3BD1-B3D7-E1017D6FEDE0)]
            [version(0x00000001)]
            interface IReframingFilter : IInspectable
            {
                [propget] HRESULT ReframingArea([out] [retval] Windows.Foundation.Rect* __returnValue);
                [propput] HRESULT ReframingArea([in] Windows.Foundation.Rect value);
                [propget] HRESULT Angle([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT Angle([in] DOUBLE value);
                [propget] HRESULT PivotPoint([out] [retval] Windows.Foundation.Point* __returnValue);
                [propput] HRESULT PivotPoint([in] Windows.Foundation.Point value);
            }

            [exclusiveto(Lumia.Imaging.Transforms.ReframingFilter)]
            [uuid(673524EE-C6BF-3E39-B21D-3DC512731A1B)]
            [version(0x00000001)]
            interface IReframingFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] Windows.Foundation.Rect reframingArea, [in] DOUBLE angle, [out] [retval] Lumia.Imaging.Transforms.ReframingFilter** __returnValue);
                [overload("CreateInstance")] HRESULT CreateWithPivotPoint([in] Windows.Foundation.Rect reframingArea, [in] DOUBLE angle, [in] Windows.Foundation.Point pivotPoint, [out] [retval] Lumia.Imaging.Transforms.ReframingFilter** __returnValue);
            }

            [exclusiveto(Lumia.Imaging.Transforms.RotationFilter)]
            [uuid(ADBED7B5-12A9-318F-B39E-C317F610EA64)]
            [version(0x00000001)]
            interface IRotationFilter : IInspectable
            {
                [propget] HRESULT RotationAngle([out] [retval] DOUBLE* __returnValue);
                [propput] HRESULT RotationAngle([in] DOUBLE value);
            }

            [exclusiveto(Lumia.Imaging.Transforms.RotationFilter)]
            [uuid(E53C2489-CBA0-3AA9-A790-AA8826BC0AE4)]
            [version(0x00000001)]
            interface IRotationFilterFactory : IInspectable
            {
                [overload("CreateInstance")] HRESULT Create([in] DOUBLE rotationAngle, [out] [retval] Lumia.Imaging.Transforms.RotationFilter** __returnValue);
            }

            [activatable(Lumia.Imaging.Transforms.ICropFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass CropFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Transforms.ICropFilter;
            }

            [activatable(Lumia.Imaging.Transforms.IScaleFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ScaleFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Transforms.IScaleFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Transforms.IFlipFilterFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass FlipFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Transforms.IFlipFilter;
            }

            [activatable(0x00000001)]
            [activatable(Lumia.Imaging.Transforms.IImageAlignerFactory, 0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ImageAligner
            {
                interface Windows.Foundation.IClosable;
                [default] interface Lumia.Imaging.Transforms.IImageAligner;
            }

            [activatable(Lumia.Imaging.Transforms.IReframingFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass ReframingFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Transforms.IReframingFilter;
            }

            [activatable(Lumia.Imaging.Transforms.IRotationFilterFactory, 0x00000001)]
            [activatable(0x00000001)]
            [marshaling_behavior(agile)]
            [threading(both)]
            [version(0x00000001)]
            runtimeclass RotationFilter
            {
                interface Lumia.Imaging.IFilter;
                [default] interface Lumia.Imaging.Transforms.IRotationFilter;
            }
        }
    }
}
